[{"oldName":"testCreate_nonAsciiParameter","newName":"testCreate_nonAsciiType","body":"{try {MediaType.create(\"…\",\"a\");fail();} catch (IllegalArgumentException expected) {}}"},{"oldName":"testCreate_nonAsciiParameterValue","newName":"testCreate_nonAsciiSubtype","body":"{try {MediaType.create(\"a\",\"…\");fail();} catch (IllegalArgumentException expected) {}}"},{"oldName":"testCreate_nonAsciiParameter","newName":"testCreate_nonAsciiType","body":"{try {MediaType.create(\"…\",\"a\");fail();} catch (IllegalArgumentException expected) {}}"},{"oldName":"testCreate_nonAsciiParameterValue","newName":"testCreate_nonAsciiSubtype","body":"{try {MediaType.create(\"a\",\"…\");fail();} catch (IllegalArgumentException expected) {}}"},{"oldName":"addEdge_existingNodes","newName":"putEdge_existingNodes","body":"{addNode(N1);addNode(N2);assertThat(putEdge(N1,N2)).isTrue();}"},{"oldName":"addEdge_existingNodes","newName":"putEdge_existingNodes","body":"{addNode(N1);addNode(N2);assertThat(putEdge(N1,N2)).isTrue();}"},{"oldName":"testSetFuture_misbehavingFuture","newName":"testSetFuture_misbehavingFutureThrows","body":"{SettableFuture\u003cString\u003e future\u003dSettableFuture.create();ListenableFuture\u003cString\u003e badFuture\u003dnew ListenableFuture\u003cString\u003e(){@Override public boolean cancel(boolean interrupt){return false;}@Override public boolean isDone(){return true;}@Override public boolean isCancelled(){return false;}@Override public String get(){throw new CancellationException();}@Override public String get(long time, TimeUnit unit){throw new CancellationException();}@Override public void addListener(Runnable runnable, Executor executor){executor.execute(runnable);}};future.setFuture(badFuture);ExecutionException expected\u003dgetExpectingExecutionException(future);assertThat(expected).hasCauseThat().isInstanceOf(IllegalArgumentException.class);assertThat(expected).hasCauseThat().hasMessageThat().contains(badFuture.toString());}"},{"oldName":"testSetFuture_misbehavingFuture","newName":"testSetFuture_misbehavingFutureThrows","body":"{SettableFuture\u003cString\u003e future\u003dSettableFuture.create();ListenableFuture\u003cString\u003e badFuture\u003dnew ListenableFuture\u003cString\u003e(){@Override public boolean cancel(boolean interrupt){return false;}@Override public boolean isDone(){return true;}@Override public boolean isCancelled(){return false;}@Override public String get(){throw new CancellationException();}@Override public String get(long time, TimeUnit unit){throw new CancellationException();}@Override public void addListener(Runnable runnable, Executor executor){executor.execute(runnable);}};future.setFuture(badFuture);ExecutionException expected\u003dgetExpectingExecutionException(future);assertThat(expected).hasCauseThat().isInstanceOf(IllegalArgumentException.class);assertThat(expected).hasCauseThat().hasMessageThat().contains(badFuture.toString());}"},{"oldName":"testSetFuture_misbehavingFutureThrows","newName":"testSetFuture_misbehavingFuture","body":"{SettableFuture\u003cString\u003e future\u003dSettableFuture.create();ListenableFuture\u003cString\u003e badFuture\u003dnew ListenableFuture\u003cString\u003e(){@Override public boolean cancel(boolean interrupt){return false;}@Override public boolean isDone(){return true;}@Override public boolean isCancelled(){return false;}@Override public String get(){throw new CancellationException();}@Override public String get(long time, TimeUnit unit){throw new CancellationException();}@Override public void addListener(Runnable runnable, Executor executor){executor.execute(runnable);}};future.setFuture(badFuture);ExecutionException expected\u003dgetExpectingExecutionException(future);assertThat(expected).hasCauseThat().isInstanceOf(IllegalArgumentException.class);assertThat(expected).hasCauseThat().hasMessageThat().contains(badFuture.toString());}"},{"oldName":"testSetFuture_misbehavingFutureThrows","newName":"testSetFuture_misbehavingFuture","body":"{SettableFuture\u003cString\u003e future\u003dSettableFuture.create();ListenableFuture\u003cString\u003e badFuture\u003dnew ListenableFuture\u003cString\u003e(){@Override public boolean cancel(boolean interrupt){return false;}@Override public boolean isDone(){return true;}@Override public boolean isCancelled(){return false;}@Override public String get(){throw new CancellationException();}@Override public String get(long time, TimeUnit unit){throw new CancellationException();}@Override public void addListener(Runnable runnable, Executor executor){executor.execute(runnable);}};future.setFuture(badFuture);ExecutionException expected\u003dgetExpectingExecutionException(future);assertThat(expected).hasCauseThat().isInstanceOf(IllegalArgumentException.class);assertThat(expected).hasCauseThat().hasMessageThat().contains(badFuture.toString());}"},{"oldName":"testSetFuture_misbehavingFuture","newName":"testSetFuture_misbehavingFutureThrows","body":"{SettableFuture\u003cString\u003e future\u003dSettableFuture.create();ListenableFuture\u003cString\u003e badFuture\u003dnew ListenableFuture\u003cString\u003e(){@Override public boolean cancel(boolean interrupt){return false;}@Override public boolean isDone(){return true;}@Override public boolean isCancelled(){return false;}@Override public String get(){throw new CancellationException();}@Override public String get(long time, TimeUnit unit){throw new CancellationException();}@Override public void addListener(Runnable runnable, Executor executor){executor.execute(runnable);}};future.setFuture(badFuture);ExecutionException expected\u003dgetExpectingExecutionException(future);assertThat(expected).hasCauseThat().isInstanceOf(IllegalArgumentException.class);assertThat(expected).hasCauseThat().hasMessageThat().contains(badFuture.toString());}"},{"oldName":"testSetFuture_misbehavingFuture","newName":"testSetFuture_misbehavingFutureThrows","body":"{SettableFuture\u003cString\u003e future\u003dSettableFuture.create();ListenableFuture\u003cString\u003e badFuture\u003dnew ListenableFuture\u003cString\u003e(){@Override public boolean cancel(boolean interrupt){return false;}@Override public boolean isDone(){return true;}@Override public boolean isCancelled(){return false;}@Override public String get(){throw new CancellationException();}@Override public String get(long time, TimeUnit unit){throw new CancellationException();}@Override public void addListener(Runnable runnable, Executor executor){executor.execute(runnable);}};future.setFuture(badFuture);ExecutionException expected\u003dgetExpectingExecutionException(future);assertThat(expected).hasCauseThat().isInstanceOf(IllegalArgumentException.class);assertThat(expected).hasCauseThat().hasMessageThat().contains(badFuture.toString());}"},{"oldName":"testTransformAsync_toString","newName":"testTransformAsync_functionToString","body":"{final CountDownLatch functionCalled\u003dnew CountDownLatch(1);final CountDownLatch functionBlocking\u003dnew CountDownLatch(1);AsyncFunction\u003cObject,Object\u003e function\u003dnew AsyncFunction\u003cObject,Object\u003e(){@Override public ListenableFuture\u003cObject\u003e apply(Object input) throws Exception {functionCalled.countDown();functionBlocking.await();return immediateFuture(null);}@Override public String toString(){return \"Called my toString\";}};ExecutorService executor\u003dExecutors.newSingleThreadExecutor();try {ListenableFuture\u003c?\u003e output\u003dFutures.transformAsync(immediateFuture(null),function,executor);functionCalled.await();assertThat(output.toString()).contains(\"Called my toString\");} finally {functionBlocking.countDown();executor.shutdown();}}"},{"oldName":"testTransformAsync_toString","newName":"testTransformAsync_functionToString","body":"{final CountDownLatch functionCalled\u003dnew CountDownLatch(1);final CountDownLatch functionBlocking\u003dnew CountDownLatch(1);AsyncFunction\u003cObject,Object\u003e function\u003dnew AsyncFunction\u003cObject,Object\u003e(){@Override public ListenableFuture\u003cObject\u003e apply(Object input) throws Exception {functionCalled.countDown();functionBlocking.await();return immediateFuture(null);}@Override public String toString(){return \"Called my toString\";}};ExecutorService executor\u003dExecutors.newSingleThreadExecutor();try {ListenableFuture\u003c?\u003e output\u003dFutures.transformAsync(immediateFuture(null),function,executor);functionCalled.await();assertThat(output.toString()).contains(\"Called my toString\");} finally {functionBlocking.countDown();executor.shutdown();}}"},{"oldName":"testBuilderAddAllMultiset","newName":"testBuilderAddAllHashMultiset","body":"{Multiset\u003cString\u003e a\u003dHashMultiset.create(asList(\"a\",\"b\",\"b\"));Multiset\u003cString\u003e b\u003dHashMultiset.create(asList(\"c\",\"b\"));ImmutableMultiset\u003cString\u003e multiset\u003dnew ImmutableMultiset.Builder\u003cString\u003e().addAll(a).addAll(b).build();assertEquals(HashMultiset.create(asList(\"a\",\"b\",\"b\",\"b\",\"c\")),multiset);}"},{"oldName":"testBuilderAddAllMultiset","newName":"testBuilderAddAllHashMultiset","body":"{Multiset\u003cString\u003e a\u003dHashMultiset.create(asList(\"a\",\"b\",\"b\"));Multiset\u003cString\u003e b\u003dHashMultiset.create(asList(\"c\",\"b\"));ImmutableMultiset\u003cString\u003e multiset\u003dnew ImmutableMultiset.Builder\u003cString\u003e().addAll(a).addAll(b).build();assertEquals(HashMultiset.create(asList(\"a\",\"b\",\"b\",\"b\",\"c\")),multiset);}"},{"oldName":"testExclusion","newName":"testPublicSuffixExclusion","body":"{InternetDomainName domain\u003dInternetDomainName.from(\"foo.city.yokohama.jp\");assertTrue(domain.hasPublicSuffix());assertEquals(\"yokohama.jp\",domain.publicSuffix().toString());assertFalse(domain.publicSuffix().isPublicSuffix());}"},{"oldName":"testMultipleUnders","newName":"testPublicSuffixMultipleUnders","body":"{InternetDomainName domain\u003dInternetDomainName.from(\"www.essex.sch.uk\");assertTrue(domain.hasPublicSuffix());assertEquals(\"essex.sch.uk\",domain.publicSuffix().toString());assertEquals(\"www.essex.sch.uk\",domain.topPrivateDomain().toString());}"},{"oldName":"testExclusion","newName":"testPublicSuffixExclusion","body":"{InternetDomainName domain\u003dInternetDomainName.from(\"foo.city.yokohama.jp\");assertTrue(domain.hasPublicSuffix());assertEquals(\"yokohama.jp\",domain.publicSuffix().toString());assertFalse(domain.publicSuffix().isPublicSuffix());}"},{"oldName":"testMultipleUnders","newName":"testPublicSuffixMultipleUnders","body":"{InternetDomainName domain\u003dInternetDomainName.from(\"www.essex.sch.uk\");assertTrue(domain.hasPublicSuffix());assertEquals(\"essex.sch.uk\",domain.publicSuffix().toString());assertEquals(\"www.essex.sch.uk\",domain.topPrivateDomain().toString());}"},{"oldName":"forGraph_breadthFirst_javadocExample_iterableCanBeIteratedMultipleTimes","newName":"forGraph_breadthFirst_javadocExample_canBeIteratedMultipleTimes","body":"{Iterable\u003cCharacter\u003e result\u003dTraverser.forGraph(JAVADOC_GRAPH).breadthFirst(\u0027a\u0027);assertEqualCharNodes(result,\"abcdef\");assertEqualCharNodes(result,\"abcdef\");}"},{"oldName":"forGraph_breadthFirst_javadocExample_iterableCanBeIteratedMultipleTimes","newName":"forGraph_breadthFirst_javadocExample_canBeIteratedMultipleTimes","body":"{Iterable\u003cCharacter\u003e result\u003dTraverser.forGraph(JAVADOC_GRAPH).breadthFirst(\u0027a\u0027);assertEqualCharNodes(result,\"abcdef\");assertEqualCharNodes(result,\"abcdef\");}"},{"oldName":"testCopy","newName":"testCopy_toStringBuilder_fromReader","body":"{StringBuilder builder\u003dnew StringBuilder();long copied\u003dCharStreams.copy(new StringReader(ASCII),builder);assertEquals(ASCII,builder.toString());assertEquals(ASCII.length(),copied);StringBuilder builder2\u003dnew StringBuilder();copied\u003dCharStreams.copy(new StringReader(I18N),builder2);assertEquals(I18N,builder2.toString());assertEquals(I18N.length(),copied);}"},{"oldName":"testCopy","newName":"testCopy_toStringBuilder_fromReader","body":"{StringBuilder builder\u003dnew StringBuilder();long copied\u003dCharStreams.copy(new StringReader(ASCII),builder);assertEquals(ASCII,builder.toString());assertEquals(ASCII.length(),copied);StringBuilder builder2\u003dnew StringBuilder();copied\u003dCharStreams.copy(new StringReader(I18N),builder2);assertEquals(I18N,builder2.toString());assertEquals(I18N.length(),copied);}"},{"oldName":"testConcatPartiallyAdvanced","newName":"testConcatPartiallyAdvancedSecond","body":"{Iterator\u003cString\u003e itr1\u003dIterators.concat(Iterators.singletonIterator(\"a\"),Iterators.forArray(\"b\",\"c\"));assertEquals(\"a\",itr1.next());assertEquals(\"b\",itr1.next());Iterator\u003cString\u003e itr2\u003dIterators.concat(Iterators.singletonIterator(\"d\"),itr1);assertEquals(\"d\",itr2.next());assertEquals(\"c\",itr2.next());}"},{"oldName":"testConcatPartiallyAdvanced","newName":"testConcatPartiallyAdvancedSecond","body":"{Iterator\u003cString\u003e itr1\u003dIterators.concat(Iterators.singletonIterator(\"a\"),Iterators.forArray(\"b\",\"c\"));assertEquals(\"a\",itr1.next());assertEquals(\"b\",itr1.next());Iterator\u003cString\u003e itr2\u003dIterators.concat(Iterators.singletonIterator(\"d\"),itr1);assertEquals(\"d\",itr2.next());assertEquals(\"c\",itr2.next());}"},{"oldName":"testFilterByType","newName":"testFilterByType_iterator","body":"{HasBoth hasBoth\u003dnew HasBoth();Iterable\u003cTypeA\u003e alist\u003dLists.newArrayList(new TypeA(),new TypeA(),hasBoth,new TypeA());Iterable\u003cTypeB\u003e blist\u003dIterables.filter(alist,TypeB.class);assertThat(blist).containsExactly(hasBoth).inOrder();}"},{"oldName":"testTransform","newName":"testTransform_iterator","body":"{List\u003cString\u003e input\u003dasList(\"1\",\"2\",\"3\");Iterable\u003cInteger\u003e result\u003dIterables.transform(input,new Function\u003cString,Integer\u003e(){@Override public Integer apply(String from){return Integer.valueOf(from);}});List\u003cInteger\u003e actual\u003dnewArrayList(result);List\u003cInteger\u003e expected\u003dasList(1,2,3);assertEquals(expected,actual);assertCanIterateAgain(result);assertEquals(\"[1, 2, 3]\",result.toString());}"},{"oldName":"testToJavaUtil","newName":"testToJavaUtil_static","body":"{assertNull(Optional.toJavaUtil(null));assertEquals(java.util.Optional.empty(),Optional.toJavaUtil(Optional.absent()));assertEquals(java.util.Optional.of(\"abc\"),Optional.toJavaUtil(Optional.of(\"abc\")));}"},{"oldName":"endpoints_directedGraph","newName":"edges_directedGraph","body":"{MutableBasicGraph\u003cInteger\u003e directedGraph\u003dBasicGraphBuilder.directed().build();directedGraph.addNode(N0);directedGraph.putEdge(N1,N2);directedGraph.putEdge(N2,N1);directedGraph.putEdge(N1,N3);directedGraph.putEdge(N4,N4);containsExactlySanityCheck(directedGraph.edges(),Endpoints.ofDirected(N1,N2),Endpoints.ofDirected(N2,N1),Endpoints.ofDirected(N1,N3),Endpoints.ofDirected(N4,N4));}"},{"oldName":"endpoints_undirectedGraph","newName":"edges_undirectedGraph","body":"{MutableBasicGraph\u003cInteger\u003e undirectedGraph\u003dBasicGraphBuilder.undirected().build();undirectedGraph.addNode(N0);undirectedGraph.putEdge(N1,N2);undirectedGraph.putEdge(N2,N1);undirectedGraph.putEdge(N1,N3);undirectedGraph.putEdge(N4,N4);containsExactlySanityCheck(undirectedGraph.edges(),Endpoints.ofUndirected(N1,N2),Endpoints.ofUndirected(N1,N3),Endpoints.ofUndirected(N4,N4));}"},{"oldName":"endpoints_directedNetwork","newName":"edges_directedNetwork","body":"{MutableNetwork\u003cInteger,String\u003e directedNetwork\u003dNetworkBuilder.directed().build();directedNetwork.addNode(N0);directedNetwork.addEdge(N1,N2,E12);directedNetwork.addEdge(N2,N1,E21);directedNetwork.addEdge(N1,N3,E13);directedNetwork.addEdge(N4,N4,E44);containsExactlySanityCheck(directedNetwork.asGraph().edges(),Endpoints.ofDirected(N1,N2),Endpoints.ofDirected(N2,N1),Endpoints.ofDirected(N1,N3),Endpoints.ofDirected(N4,N4));}"},{"oldName":"endpoints_undirectedNetwork","newName":"edges_undirectedNetwork","body":"{MutableNetwork\u003cInteger,String\u003e undirectedNetwork\u003dNetworkBuilder.undirected().allowsParallelEdges(true).build();undirectedNetwork.addNode(N0);undirectedNetwork.addEdge(N1,N2,E12);undirectedNetwork.addEdge(N2,N1,E12_A);undirectedNetwork.addEdge(N1,N3,E13);undirectedNetwork.addEdge(N4,N4,E44);containsExactlySanityCheck(undirectedNetwork.asGraph().edges(),Endpoints.ofUndirected(N1,N2),Endpoints.ofUndirected(N1,N3),Endpoints.ofUndirected(N4,N4));}"},{"oldName":"inducedSubgraph_Graph","newName":"inducedSubgraph_BasicGraph","body":"{Set\u003cInteger\u003e nodeSubset\u003dImmutableSet.of(N1,N2,N4);MutableBasicGraph\u003cInteger\u003e directedGraph\u003dBasicGraphBuilder.directed().build();directedGraph.putEdge(N1,N2);directedGraph.putEdge(N2,N1);directedGraph.putEdge(N1,N3);directedGraph.putEdge(N4,N4);directedGraph.putEdge(5,6);MutableBasicGraph\u003cInteger\u003e expectedSubgraph\u003dBasicGraphBuilder.directed().build();expectedSubgraph.putEdge(N1,N2);expectedSubgraph.putEdge(N2,N1);expectedSubgraph.putEdge(N4,N4);assertThat(inducedSubgraph(directedGraph,nodeSubset)).isEqualTo(expectedSubgraph);}"},{"oldName":"inducedSubgraph_partialEdgeIncidence","newName":"inducedSubgraph_Network","body":"{Set\u003cInteger\u003e nodeSubset\u003dImmutableSet.of(N1,N2,N4);MutableNetwork\u003cInteger,String\u003e directedGraph\u003dNetworkBuilder.directed().build();directedGraph.addEdge(N1,N2,E12);directedGraph.addEdge(N2,N1,E21);directedGraph.addEdge(N1,N3,E13);directedGraph.addEdge(N4,N4,E44);directedGraph.addEdge(5,6,\"5-6\");MutableNetwork\u003cInteger,String\u003e expectedSubgraph\u003dNetworkBuilder.directed().build();expectedSubgraph.addEdge(N1,N2,E12);expectedSubgraph.addEdge(N2,N1,E21);expectedSubgraph.addEdge(N4,N4,E44);assertThat(inducedSubgraph(directedGraph,nodeSubset)).isEqualTo(expectedSubgraph);}"},{"oldName":"orderNodes_default","newName":"nodeOrder_default","body":"{MutableGraph\u003cInteger\u003e graph\u003dGraphBuilder.directed().build();addNodes(graph);assertThat(graph.nodeOrder()).isEqualTo(insertion());assertThat(graph.nodes()).containsExactly(3,1,4).inOrder();}"},{"oldName":"orderEdges_default","newName":"edgeOrder_default","body":"{MutableNetwork\u003cInteger,String\u003e graph\u003dNetworkBuilder.directed().build();addEdges(graph);assertThat(graph.edgeOrder()).isEqualTo(ElementOrder.insertion());assertThat(graph.edges()).containsExactly(\"i\",\"e\",\"p\").inOrder();assertThat(graph.nodeOrder()).isEqualTo(ElementOrder.insertion());}"},{"oldName":"testImmediateCancelledFuture","newName":"testImmediateCancelledFutureStack","body":"{ListenableFuture\u003cString\u003e future\u003dCallerClass1.immediateCancelledFuture();assertTrue(future.isCancelled());try {CallerClass2.get(future);fail();} catch (CancellationException e) {List\u003cStackTraceElement\u003e stackTrace\u003dImmutableList.copyOf(e.getStackTrace());assertFalse(Iterables.any(stackTrace,hasClassName(CallerClass1.class)));assertTrue(Iterables.any(stackTrace,hasClassName(CallerClass2.class)));assertThat(e.getCause()).isInstanceOf(CancellationException.class);stackTrace\u003dImmutableList.copyOf(e.getCause().getStackTrace());assertTrue(Iterables.any(stackTrace,hasClassName(CallerClass1.class)));assertFalse(Iterables.any(stackTrace,hasClassName(CallerClass2.class)));}}"},{"oldName":"equals_typesDiffer","newName":"equals_directedVsUndirected","body":"{graph.addEdge(E12,N1,N2);Graph\u003cInteger,String\u003e g2;switch (graphType) {case UNDIRECTED:g2\u003dGraphs.createDirected();break;case DIRECTED:g2\u003dGraphs.createUndirected();break;default :throw new IllegalStateException(\"Unexpected graph type: \" + graphType);}g2.addEdge(E12,N1,N2);new EqualsTester().addEqualityGroup(graph).addEqualityGroup(g2).testEquals();}"},{"oldName":"addEdge_builder_existingEdgeBetweenDifferentNodes_selfLoops","newName":"addEdge_existingEdgeBetweenDifferentNodes_selfLoops","body":"{addEdge(E11,N1,N1);try {addEdge(E11,N1,N2);fail(\"Reusing an existing self-loop edge to connect different nodes succeeded\");} catch (IllegalArgumentException e) {assertThat(e.getMessage()).contains(ERROR_REUSE_EDGE);}try {addEdge(E11,N2,N2);fail(\"Reusing an existing self-loop edge to make a different self-loop edge succeeded\");} catch (IllegalArgumentException e) {assertThat(e.getMessage()).contains(ERROR_REUSE_EDGE);}addEdge(E12,N1,N2);try {addEdge(E12,N1,N1);fail(\"Reusing an existing edge to add a self-loop edge between different nodes succeeded\");} catch (IllegalArgumentException e) {assertThat(e.getMessage()).contains(ERROR_REUSE_EDGE);}}"},{"oldName":"addEdge_builder_parallelSelfLoopEdge","newName":"addEdge_parallelSelfLoopEdge","body":"{addEdge(E11,N1,N1);try {addEdge(EDGE_NOT_IN_GRAPH,N1,N1);fail(\"Adding a parallel self-loop edge succeeded\");} catch (IllegalArgumentException e) {assertThat(e.getMessage()).contains(ERROR_PARALLEL_EDGE);}}"},{"oldName":"addEdge_builder_selfLoop","newName":"addEdge_selfLoop","body":"{try {addEdge(E11,N1,N1);fail(ERROR_ADDED_SELF_LOOP);} catch (IllegalArgumentException e) {assertThat(e.getMessage()).contains(ERROR_SELF_LOOP);}}"},{"oldName":"addEdge_builder_selfLoop","newName":"addEdge_selfLoop","body":"{try {addEdge(E11,N1,N1);fail(ERROR_ADDED_SELF_LOOP);} catch (IllegalArgumentException e) {assertThat(e.getMessage()).contains(ERROR_SELF_LOOP);}}"},{"oldName":"addEdge_builder_existingEdgeBetweenDifferentNodes_selfLoops","newName":"addEdge_existingEdgeBetweenDifferentNodes_selfLoops","body":"{addEdge(E11,N1,N1);try {addEdge(E11,N1,N2);fail(\"Reusing an existing self-loop edge to connect different nodes succeeded\");} catch (IllegalArgumentException e) {assertThat(e.getMessage()).contains(ERROR_REUSE_EDGE);}try {addEdge(E11,N2,N2);fail(\"Reusing an existing self-loop edge to make a different self-loop edge succeeded\");} catch (IllegalArgumentException e) {assertThat(e.getMessage()).contains(ERROR_REUSE_EDGE);}addEdge(E12,N1,N2);try {addEdge(E12,N1,N1);fail(\"Reusing an existing edge to add a self-loop edge between different nodes succeeded\");} catch (IllegalArgumentException e) {assertThat(e.getMessage()).contains(ERROR_REUSE_EDGE);}}"},{"oldName":"addEdge_builder_parallelSelfLoopEdge","newName":"addEdge_parallelSelfLoopEdge","body":"{addEdge(E11,N1,N1);try {addEdge(EDGE_NOT_IN_GRAPH,N1,N1);fail(\"Adding a parallel self-loop edge succeeded\");} catch (IllegalArgumentException e) {assertThat(e.getMessage()).contains(ERROR_PARALLEL_EDGE);}}"},{"oldName":"testAllAsList_logging_multipleExceptions","newName":"testAllAsList_logging_multipleExceptions_alreadyDone","body":"{try {Futures.allAsList(immediateFailedFuture(new MyException()),immediateFailedFuture(new MyException())).get();fail();} catch (ExecutionException e) {assertTrue(e.getCause() instanceof MyException);List\u003cLogRecord\u003e logged\u003daggregateFutureLogHandler.getStoredLogRecords();assertEquals(1,logged.size());assertTrue(logged.get(0).getThrown() instanceof MyException);}}"},{"oldName":"testIsAssignableFrom_typeVariable","newName":"testisSupertypeOf_typeVariable","body":"{assertAssignable(TypeToken.of(new TypeCapture\u003cN1\u003e(){}.capture()),TypeToken.of(new TypeCapture\u003cN1\u003e(){}.capture()));assertNotAssignable(new TypeToken\u003cList\u003cN11\u003e\u003e(){},new TypeToken\u003cList\u003cN1\u003e\u003e(){});assertNotAssignable(new TypeToken\u003cNumber\u003e(){},TypeToken.of(new TypeCapture\u003cN1\u003e(){}.capture()));assertAssignable(TypeToken.of(new TypeCapture\u003cN11\u003e(){}.capture()),TypeToken.of(new TypeCapture\u003cN1\u003e(){}.capture()));assertNotAssignable(TypeToken.of(new TypeCapture\u003cN2\u003e(){}.capture()),TypeToken.of(new TypeCapture\u003cN1\u003e(){}.capture()));}"},{"oldName":"testIsAssignableFrom_equalWildcardTypes","newName":"testisSupertypeOf_equalWildcardTypes","body":"{assertAssignable(new TypeToken\u003cList\u003c? extends N1\u003e\u003e(){},new TypeToken\u003cList\u003c? extends N1\u003e\u003e(){});assertAssignable(new TypeToken\u003cList\u003c? super N1\u003e\u003e(){},new TypeToken\u003cList\u003c? super N1\u003e\u003e(){});assertAssignable(new TypeToken\u003cList\u003c? extends Number\u003e\u003e(){},new TypeToken\u003cList\u003c? extends Number\u003e\u003e(){});assertAssignable(new TypeToken\u003cList\u003c? super Number\u003e\u003e(){},new TypeToken\u003cList\u003c? super Number\u003e\u003e(){});}"},{"oldName":"testIsAssignableFrom_wildcard_noBound","newName":"testisSupertypeOf_wildcard_noBound","body":"{assertAssignable(new TypeToken\u003cList\u003c? super N\u003e\u003e(){},new TypeToken\u003cList\u003c?\u003e\u003e(){});assertAssignable(new TypeToken\u003cList\u003cN\u003e\u003e(){},new TypeToken\u003cList\u003c?\u003e\u003e(){});}"},{"oldName":"testIsAssignableFrom_wildcardType_upperBoundMatch","newName":"testisSupertypeOf_wildcardType_upperBoundMatch","body":"{assertAssignable(new TypeToken\u003cList\u003cN11\u003e\u003e(){},new TypeToken\u003cList\u003c? extends N1\u003e\u003e(){});assertNotAssignable(new TypeToken\u003cList\u003cN1\u003e\u003e(){},new TypeToken\u003cList\u003c? extends N11\u003e\u003e(){});assertNotAssignable(new TypeToken\u003cList\u003cNumber\u003e\u003e(){},new TypeToken\u003cList\u003c? extends N11\u003e\u003e(){});assertAssignable(new TypeToken\u003cList\u003cN1\u003e\u003e(){},new TypeToken\u003cList\u003c? extends Number\u003e\u003e(){});assertAssignable(new TypeToken\u003cArrayList\u003cN1\u003e\u003e(){},new TypeToken\u003cList\u003c? extends Number\u003e\u003e(){});assertAssignable(new TypeToken\u003cList\u003c? extends N11\u003e\u003e(){},new TypeToken\u003cList\u003c? extends Number\u003e\u003e(){});}"},{"oldName":"testIsAssignableFrom_wildcardType_lowerBoundMatch","newName":"testisSupertypeOf_wildcardType_lowerBoundMatch","body":"{assertAssignable(new TypeToken\u003cList\u003cN1\u003e\u003e(){},new TypeToken\u003cList\u003c? super N11\u003e\u003e(){});assertAssignable(new TypeToken\u003cArrayList\u003cNumber\u003e\u003e(){},new TypeToken\u003cList\u003c? super N1\u003e\u003e(){});assertNotAssignable(new TypeToken\u003cArrayList\u003c? super N11\u003e\u003e(){},new TypeToken\u003cList\u003c? super Number\u003e\u003e(){});assertAssignable(new TypeToken\u003cArrayList\u003c? super N1\u003e\u003e(){},new TypeToken\u003cList\u003c? super N11\u003e\u003e(){});assertAssignable(new TypeToken\u003cArrayList\u003c? super Number\u003e\u003e(){},new TypeToken\u003cList\u003c? super N11\u003e\u003e(){});assertNotAssignable(new TypeToken\u003cArrayList\u003cN11\u003e\u003e(){},new TypeToken\u003cList\u003c? super Number\u003e\u003e(){});assertAssignable(new TypeToken\u003cArrayList\u003cNumber\u003e\u003e(){},new TypeToken\u003cList\u003c? super Number\u003e\u003e(){});assertAssignable(new TypeToken\u003cArrayList\u003cObject\u003e\u003e(){},new TypeToken\u003cList\u003c? super Number\u003e\u003e(){});}"},{"oldName":"testIsAssignableFrom_recursiveTypeVariableBounds","newName":"testisSupertypeOf_recursiveTypeVariableBounds","body":"{assertAssignable(TypeToken.of(new TypeCapture\u003cL\u003e(){}.capture()),TypeToken.of(new TypeCapture\u003cL\u003e(){}.capture()));assertNotAssignable(TypeToken.of(new TypeCapture\u003cR\u003e(){}.capture()),TypeToken.of(new TypeCapture\u003cL\u003e(){}.capture()));assertAssignable(TypeToken.of(new TypeCapture\u003cL\u003e(){}.capture()),new TypeToken\u003cList\u003cR\u003e\u003e(){});}"},{"oldName":"testIsAssignableFrom_resolved","newName":"testisSupertypeOf_resolved","body":"{assertFalse(Assignability.of().isAssignable());assertTrue(new Assignability\u003cInteger,Integer\u003e(){}.isAssignable());assertTrue(new Assignability\u003cInteger,Object\u003e(){}.isAssignable());assertFalse(new Assignability\u003cInteger,String\u003e(){}.isAssignable());TypeTokenTest.\u003cNumber,Integer\u003eassignabilityTestWithTypeVariables();}"},{"oldName":"testListenToResolved_misbehavingListener","newName":"testMisbehavingListenerLaterDone","body":"{class BadRunnableException extends RuntimeException {}Runnable bad\u003dnew Runnable(){@Override public void run(){throw new BadRunnableException();}};future.addListener(bad,directExecutor());future.set(1);}"},{"oldName":"testGetAllPresent","newName":"testGetIfPresent","body":"{final AtomicReference\u003cObject\u003e valueRef\u003dnew AtomicReference\u003cObject\u003e();Cache\u003cObject,Object\u003e cache\u003dnew AbstractCache\u003cObject,Object\u003e(){@Override public Object getIfPresent(Object key){return valueRef.get();}};assertNull(cache.getIfPresent(new Object()));Object newValue\u003dnew Object();valueRef.set(newValue);assertSame(newValue,cache.getIfPresent(new Object()));}"},{"oldName":"testGetAllPresent","newName":"testGetIfPresent","body":"{final AtomicReference\u003cObject\u003e valueRef\u003dnew AtomicReference\u003cObject\u003e();Cache\u003cObject,Object\u003e cache\u003dnew AbstractCache\u003cObject,Object\u003e(){@Override public Object getIfPresent(Object key){return valueRef.get();}};assertNull(cache.getIfPresent(new Object()));Object newValue\u003dnew Object();valueRef.set(newValue);assertSame(newValue,cache.getIfPresent(new Object()));}"},{"oldName":"testRemoveOccurrencesEmpty","newName":"testRemoveOccurrencesMultisetEmpty","body":"{Multiset\u003cString\u003e multiset\u003dHashMultiset.create();Multiset\u003cString\u003e toRemove\u003dHashMultiset.create(Arrays.asList(\"a\",\"b\",\"a\"));assertFalse(Multisets.retainOccurrences(multiset,toRemove));assertTrue(multiset.isEmpty());}"},{"oldName":"testRemoveEmptyOccurrences","newName":"testRemoveEmptyOccurrencesMultiset","body":"{Multiset\u003cString\u003e multiset\u003dTreeMultiset.create(Arrays.asList(\"a\",\"b\",\"a\"));Multiset\u003cString\u003e toRemove\u003dHashMultiset.create();assertFalse(Multisets.removeOccurrences(multiset,toRemove));ASSERT.that(multiset).has().exactly(\"a\",\"a\",\"b\").inOrder();}"},{"oldName":"testRemoveOccurrences","newName":"testRemoveOccurrencesMultiset","body":"{Multiset\u003cString\u003e multiset\u003dTreeMultiset.create(Arrays.asList(\"a\",\"b\",\"a\",\"c\"));Multiset\u003cString\u003e toRemove\u003dHashMultiset.create(Arrays.asList(\"a\",\"b\",\"b\"));assertTrue(Multisets.removeOccurrences(multiset,toRemove));ASSERT.that(multiset).has().exactly(\"a\",\"c\").inOrder();}"},{"oldName":"testRemoveOccurrencesEmpty","newName":"testRemoveOccurrencesMultisetEmpty","body":"{Multiset\u003cString\u003e multiset\u003dHashMultiset.create();Multiset\u003cString\u003e toRemove\u003dHashMultiset.create(Arrays.asList(\"a\",\"b\",\"a\"));assertFalse(Multisets.retainOccurrences(multiset,toRemove));assertTrue(multiset.isEmpty());}"},{"oldName":"testRemoveEmptyOccurrences","newName":"testRemoveEmptyOccurrencesMultiset","body":"{Multiset\u003cString\u003e multiset\u003dTreeMultiset.create(Arrays.asList(\"a\",\"b\",\"a\"));Multiset\u003cString\u003e toRemove\u003dHashMultiset.create();assertFalse(Multisets.removeOccurrences(multiset,toRemove));ASSERT.that(multiset).has().exactly(\"a\",\"a\",\"b\").inOrder();}"},{"oldName":"testRemoveOccurrences","newName":"testRemoveOccurrencesMultiset","body":"{Multiset\u003cString\u003e multiset\u003dTreeMultiset.create(Arrays.asList(\"a\",\"b\",\"a\",\"c\"));Multiset\u003cString\u003e toRemove\u003dHashMultiset.create(Arrays.asList(\"a\",\"b\",\"b\"));assertTrue(Multisets.removeOccurrences(multiset,toRemove));ASSERT.that(multiset).has().exactly(\"a\",\"c\").inOrder();}"},{"oldName":"testTryGate","newName":"testTryAcquire_noWaitAllowed","body":"{RateLimiter limiter\u003dRateLimiter.create(stopwatch,5.0);assertTrue(limiter.tryAcquire(0,SECONDS));assertFalse(limiter.tryAcquire(0,SECONDS));assertFalse(limiter.tryAcquire(0,SECONDS));stopwatch.sleepMillis(100);assertFalse(limiter.tryAcquire(0,SECONDS));}"},{"oldName":"testTryGate","newName":"testTryAcquire_noWaitAllowed","body":"{RateLimiter limiter\u003dRateLimiter.create(stopwatch,5.0);assertTrue(limiter.tryAcquire(0,SECONDS));assertFalse(limiter.tryAcquire(0,SECONDS));assertFalse(limiter.tryAcquire(0,SECONDS));stopwatch.sleepMillis(100);assertFalse(limiter.tryAcquire(0,SECONDS));}"},{"oldName":"testTransform_ListenableFuture_genericsNull","newName":"testTransform_genericsNull","body":"{ListenableFuture\u003c?\u003e nullFuture\u003dFutures.immediateFuture(null);ListenableFuture\u003c?\u003e transformedFuture\u003dFutures.transform(nullFuture,Functions.constant(null));assertNull(transformedFuture.get());}"},{"oldName":"testTransform_ListenableFuture_genericsHierarchy","newName":"testTransform_genericsHierarchy","body":"{ListenableFuture\u003cFooChild\u003e future\u003dFutures.immediateFuture(null);final BarChild barChild\u003dnew BarChild();Function\u003cFoo,BarChild\u003e function\u003dnew Function\u003cFoo,BarChild\u003e(){@Override public BarChild apply(Foo unused){return barChild;}};Bar bar\u003dFutures.transform(future,function).get();assertSame(barChild,bar);}"},{"oldName":"testTransform_ListenableFuture_cancelPropagatesToInput","newName":"testTransform_cancelPropagatesToInput","body":"{SettableFuture\u003cFoo\u003e input\u003dSettableFuture.create();AsyncFunction\u003cFoo,Bar\u003e function\u003dnew AsyncFunction\u003cFoo,Bar\u003e(){@Override public ListenableFuture\u003cBar\u003e apply(Foo unused){throw new AssertionFailedError(\"Unexpeted call to apply.\");}};assertTrue(Futures.transform(input,function).cancel(false));assertTrue(input.isCancelled());assertFalse(input.wasInterrupted());}"},{"oldName":"testTransform_ListenableFuture_interruptPropagatesToInput","newName":"testTransform_interruptPropagatesToInput","body":"{SettableFuture\u003cFoo\u003e input\u003dSettableFuture.create();AsyncFunction\u003cFoo,Bar\u003e function\u003dnew AsyncFunction\u003cFoo,Bar\u003e(){@Override public ListenableFuture\u003cBar\u003e apply(Foo unused){throw new AssertionFailedError(\"Unexpeted call to apply.\");}};assertTrue(Futures.transform(input,function).cancel(true));assertTrue(input.isCancelled());assertTrue(input.wasInterrupted());}"},{"oldName":"testTransform_ListenableFuture_cancelPropagatesToAsyncOutput","newName":"testTransform_cancelPropagatesToAsyncOutput","body":"{ListenableFuture\u003cFoo\u003e immediate\u003dFutures.immediateFuture(new Foo());final SettableFuture\u003cBar\u003e secondary\u003dSettableFuture.create();AsyncFunction\u003cFoo,Bar\u003e function\u003dnew AsyncFunction\u003cFoo,Bar\u003e(){@Override public ListenableFuture\u003cBar\u003e apply(Foo unused){return secondary;}};assertTrue(Futures.transform(immediate,function).cancel(false));assertTrue(secondary.isCancelled());assertFalse(secondary.wasInterrupted());}"},{"oldName":"testTransform_ListenableFuture_interruptPropagatesToAsyncOutput","newName":"testTransform_interruptPropagatesToAsyncOutput","body":"{ListenableFuture\u003cFoo\u003e immediate\u003dFutures.immediateFuture(new Foo());final SettableFuture\u003cBar\u003e secondary\u003dSettableFuture.create();AsyncFunction\u003cFoo,Bar\u003e function\u003dnew AsyncFunction\u003cFoo,Bar\u003e(){@Override public ListenableFuture\u003cBar\u003e apply(Foo unused){return secondary;}};assertTrue(Futures.transform(immediate,function).cancel(true));assertTrue(secondary.isCancelled());assertTrue(secondary.wasInterrupted());}"},{"oldName":"testTransformValueRemainsMemoized_ListenableFuture","newName":"testTransformValueRemainsMemoized","body":"{class Holder {int value\u003d2;}final Holder holder\u003dnew Holder();Function\u003cInteger,Integer\u003e adder\u003dnew Function\u003cInteger,Integer\u003e(){@Override public Integer apply(Integer from){return from + holder.value;}};assertEquals(6,adder.apply(4).intValue());ListenableFuture\u003cInteger\u003e immediateFuture\u003dFutures.immediateFuture(4);Future\u003cInteger\u003e transformedFuture\u003dFutures.transform(immediateFuture,adder);assertEquals(6,transformedFuture.get().intValue());holder.value\u003d3;assertEquals(6,transformedFuture.get().intValue());assertEquals(7,adder.apply(4).intValue());holder.value\u003d4;assertEquals(6,transformedFuture.get().intValue());assertEquals(8,adder.apply(4).intValue());assertEquals(6,transformedFuture.get(1000,TimeUnit.SECONDS).intValue());assertEquals(8,Futures.transform(immediateFuture,adder).get().intValue());assertEquals(8,Futures.transform(immediateFuture,adder).get(1000,TimeUnit.SECONDS).intValue());}"},{"oldName":"testTransformExceptionRemainsMemoized_ListenableFuture","newName":"testTransformExceptionRemainsMemoized","body":"{SettableFuture\u003cInteger\u003e exceptionInput\u003dSettableFuture.create();ListenableFuture\u003cInteger\u003e exceptionComposedFuture\u003dFutures.transform(exceptionInput,newOneTimeExceptionThrower());exceptionInput.set(0);runGetIdempotencyTest(exceptionComposedFuture,MyRuntimeException.class);SettableFuture\u003cInteger\u003e errorInput\u003dSettableFuture.create();ListenableFuture\u003cInteger\u003e errorComposedFuture\u003dFutures.transform(errorInput,newOneTimeErrorThrower());errorInput.set(0);runGetIdempotencyTest(errorComposedFuture,MyError.class);exceptionComposedFuture\u003dFutures.transform(exceptionInput,newOneTimeExceptionThrower());runGetIdempotencyTest(exceptionComposedFuture,MyRuntimeException.class);runGetIdempotencyTest(Futures.transform(errorInput,newOneTimeErrorThrower()),MyError.class);runGetIdempotencyTest(errorComposedFuture,MyError.class);}"},{"oldName":"testTransform_ListenableFuture_genericsNull","newName":"testTransform_genericsNull","body":"{ListenableFuture\u003c?\u003e nullFuture\u003dFutures.immediateFuture(null);ListenableFuture\u003c?\u003e transformedFuture\u003dFutures.transform(nullFuture,Functions.constant(null));assertNull(transformedFuture.get());}"},{"oldName":"testTransform_ListenableFuture_genericsHierarchy","newName":"testTransform_genericsHierarchy","body":"{ListenableFuture\u003cFooChild\u003e future\u003dFutures.immediateFuture(null);final BarChild barChild\u003dnew BarChild();Function\u003cFoo,BarChild\u003e function\u003dnew Function\u003cFoo,BarChild\u003e(){@Override public BarChild apply(Foo unused){return barChild;}};Bar bar\u003dFutures.transform(future,function).get();assertSame(barChild,bar);}"},{"oldName":"testTransform_ListenableFuture_cancelPropagatesToInput","newName":"testTransform_cancelPropagatesToInput","body":"{SettableFuture\u003cFoo\u003e input\u003dSettableFuture.create();AsyncFunction\u003cFoo,Bar\u003e function\u003dnew AsyncFunction\u003cFoo,Bar\u003e(){@Override public ListenableFuture\u003cBar\u003e apply(Foo unused){throw new AssertionFailedError(\"Unexpeted call to apply.\");}};assertTrue(Futures.transform(input,function).cancel(false));assertTrue(input.isCancelled());assertFalse(input.wasInterrupted());}"},{"oldName":"testTransform_ListenableFuture_interruptPropagatesToInput","newName":"testTransform_interruptPropagatesToInput","body":"{SettableFuture\u003cFoo\u003e input\u003dSettableFuture.create();AsyncFunction\u003cFoo,Bar\u003e function\u003dnew AsyncFunction\u003cFoo,Bar\u003e(){@Override public ListenableFuture\u003cBar\u003e apply(Foo unused){throw new AssertionFailedError(\"Unexpeted call to apply.\");}};assertTrue(Futures.transform(input,function).cancel(true));assertTrue(input.isCancelled());assertTrue(input.wasInterrupted());}"},{"oldName":"testTransform_ListenableFuture_cancelPropagatesToAsyncOutput","newName":"testTransform_cancelPropagatesToAsyncOutput","body":"{ListenableFuture\u003cFoo\u003e immediate\u003dFutures.immediateFuture(new Foo());final SettableFuture\u003cBar\u003e secondary\u003dSettableFuture.create();AsyncFunction\u003cFoo,Bar\u003e function\u003dnew AsyncFunction\u003cFoo,Bar\u003e(){@Override public ListenableFuture\u003cBar\u003e apply(Foo unused){return secondary;}};assertTrue(Futures.transform(immediate,function).cancel(false));assertTrue(secondary.isCancelled());assertFalse(secondary.wasInterrupted());}"},{"oldName":"testTransform_ListenableFuture_interruptPropagatesToAsyncOutput","newName":"testTransform_interruptPropagatesToAsyncOutput","body":"{ListenableFuture\u003cFoo\u003e immediate\u003dFutures.immediateFuture(new Foo());final SettableFuture\u003cBar\u003e secondary\u003dSettableFuture.create();AsyncFunction\u003cFoo,Bar\u003e function\u003dnew AsyncFunction\u003cFoo,Bar\u003e(){@Override public ListenableFuture\u003cBar\u003e apply(Foo unused){return secondary;}};assertTrue(Futures.transform(immediate,function).cancel(true));assertTrue(secondary.isCancelled());assertTrue(secondary.wasInterrupted());}"},{"oldName":"testTransformValueRemainsMemoized_ListenableFuture","newName":"testTransformValueRemainsMemoized","body":"{class Holder {int value\u003d2;}final Holder holder\u003dnew Holder();Function\u003cInteger,Integer\u003e adder\u003dnew Function\u003cInteger,Integer\u003e(){@Override public Integer apply(Integer from){return from + holder.value;}};assertEquals(6,adder.apply(4).intValue());ListenableFuture\u003cInteger\u003e immediateFuture\u003dFutures.immediateFuture(4);Future\u003cInteger\u003e transformedFuture\u003dFutures.transform(immediateFuture,adder);assertEquals(6,transformedFuture.get().intValue());holder.value\u003d3;assertEquals(6,transformedFuture.get().intValue());assertEquals(7,adder.apply(4).intValue());holder.value\u003d4;assertEquals(6,transformedFuture.get().intValue());assertEquals(8,adder.apply(4).intValue());assertEquals(6,transformedFuture.get(1000,TimeUnit.SECONDS).intValue());assertEquals(8,Futures.transform(immediateFuture,adder).get().intValue());assertEquals(8,Futures.transform(immediateFuture,adder).get(1000,TimeUnit.SECONDS).intValue());}"},{"oldName":"testTransformExceptionRemainsMemoized_ListenableFuture","newName":"testTransformExceptionRemainsMemoized","body":"{SettableFuture\u003cInteger\u003e exceptionInput\u003dSettableFuture.create();ListenableFuture\u003cInteger\u003e exceptionComposedFuture\u003dFutures.transform(exceptionInput,newOneTimeExceptionThrower());exceptionInput.set(0);runGetIdempotencyTest(exceptionComposedFuture,MyRuntimeException.class);SettableFuture\u003cInteger\u003e errorInput\u003dSettableFuture.create();ListenableFuture\u003cInteger\u003e errorComposedFuture\u003dFutures.transform(errorInput,newOneTimeErrorThrower());errorInput.set(0);runGetIdempotencyTest(errorComposedFuture,MyError.class);exceptionComposedFuture\u003dFutures.transform(exceptionInput,newOneTimeExceptionThrower());runGetIdempotencyTest(exceptionComposedFuture,MyRuntimeException.class);runGetIdempotencyTest(Futures.transform(errorInput,newOneTimeErrorThrower()),MyError.class);runGetIdempotencyTest(errorComposedFuture,MyError.class);}"},{"oldName":"testIsValidUtf8_1Byte","newName":"testIsWellFormed_1Byte","body":"{testBytes(1,EXPECTED_ONE_BYTE_ROUNDTRIPPABLE_COUNT);}"},{"oldName":"testIsValidUtf8_2Bytes","newName":"testIsWellFormed_2Bytes","body":"{testBytes(2,EXPECTED_TWO_BYTE_ROUNDTRIPPABLE_COUNT);}"},{"oldName":"testIsValidUtf8_3Bytes","newName":"testIsWellFormed_3Bytes","body":"{testBytes(3,EXPECTED_THREE_BYTE_ROUNDTRIPPABLE_COUNT);}"},{"oldName":"testGetClasses","newName":"testGetTopLevelClasses","body":"{Set\u003cString\u003e names\u003dSets.newHashSet();Set\u003cString\u003e strings\u003dSets.newHashSet();Set\u003cClass\u003c?\u003e\u003e classes\u003dSets.newHashSet();Set\u003cString\u003e packageNames\u003dSets.newHashSet();Set\u003cString\u003e simpleNames\u003dSets.newHashSet();ClassPath classpath\u003dClassPath.from(getClass().getClassLoader());for (ClassInfo classInfo : classpath.getTopLevelClasses(ClassPathTest.class.getPackage().getName())) {names.add(classInfo.getName());strings.add(classInfo.toString());classes.add(classInfo.load());packageNames.add(classInfo.getPackageName());simpleNames.add(classInfo.getSimpleName());}ASSERT.that(names).has().allOf(ClassPath.class.getName(),ClassPathTest.class.getName());ASSERT.that(strings).has().allOf(ClassPath.class.getName(),ClassPathTest.class.getName());ASSERT.that(classes).has().allOf(ClassPath.class,ClassPathTest.class);ASSERT.that(packageNames).has().item(ClassPath.class.getPackage().getName());ASSERT.that(simpleNames).has().allOf(\"ClassPath\",\"ClassPathTest\");assertFalse(classes.contains(ClassInSubPackage.class));}"},{"oldName":"testGetClasses_diamond","newName":"testGetTopLevelClasses_diamond","body":"{ClassLoader parent\u003dClassPathTest.class.getClassLoader();ClassLoader sub1\u003dnew ClassLoader(parent){};ClassLoader sub2\u003dnew ClassLoader(parent){};assertEquals(findClass(ClassPath.from(sub1).getTopLevelClasses(),ClassPathTest.class),findClass(ClassPath.from(sub2).getTopLevelClasses(),ClassPathTest.class));}"},{"oldName":"testName","newName":"testToString","body":"{for (String inputName : SOMEWHERE_UNDER_PS) {InternetDomainName domain\u003dInternetDomainName.from(inputName);String expectedName\u003dinputName.toLowerCase(Locale.ENGLISH);expectedName\u003dexpectedName.replaceAll(\"[\\u3002\\uFF0E\\uFF61]\",\".\");if (expectedName.endsWith(\".\")) {expectedName\u003dexpectedName.substring(0,expectedName.length() - 1);}assertEquals(expectedName,domain.name());}}"},{"oldName":"testHeadSet","newName":"testAsSetHeadSet","body":"{ImmutableRangeSet\u003cInteger\u003e rangeSet\u003dImmutableRangeSet.\u003cInteger\u003ebuilder().add(Range.closed(2,4)).add(Range.open(6,7)).add(Range.closedOpen(8,10)).add(Range.openClosed(15,17)).build();ImmutableSortedSet\u003cInteger\u003e expectedSet\u003dImmutableSortedSet.of(2,3,4,8,9,16,17);ImmutableSortedSet\u003cInteger\u003e asSet\u003drangeSet.asSet(DiscreteDomains.integers());for (int i\u003d0; i \u003c\u003d 20; i++) {assertEquals(asSet.headSet(i,false),expectedSet.headSet(i,false));assertEquals(asSet.headSet(i,true),expectedSet.headSet(i,true));}}"},{"oldName":"testTailSet","newName":"testAsSetTailSet","body":"{ImmutableRangeSet\u003cInteger\u003e rangeSet\u003dImmutableRangeSet.\u003cInteger\u003ebuilder().add(Range.closed(2,4)).add(Range.open(6,7)).add(Range.closedOpen(8,10)).add(Range.openClosed(15,17)).build();ImmutableSortedSet\u003cInteger\u003e expectedSet\u003dImmutableSortedSet.of(2,3,4,8,9,16,17);ImmutableSortedSet\u003cInteger\u003e asSet\u003drangeSet.asSet(DiscreteDomains.integers());for (int i\u003d0; i \u003c\u003d 20; i++) {assertEquals(asSet.tailSet(i,false),expectedSet.tailSet(i,false));assertEquals(asSet.tailSet(i,true),expectedSet.tailSet(i,true));}}"},{"oldName":"testSubSet","newName":"testAsSetSubSet","body":"{ImmutableRangeSet\u003cInteger\u003e rangeSet\u003dImmutableRangeSet.\u003cInteger\u003ebuilder().add(Range.closed(2,4)).add(Range.open(6,7)).add(Range.closedOpen(8,10)).add(Range.openClosed(15,17)).build();ImmutableSortedSet\u003cInteger\u003e expectedSet\u003dImmutableSortedSet.of(2,3,4,8,9,16,17);ImmutableSortedSet\u003cInteger\u003e asSet\u003drangeSet.asSet(DiscreteDomains.integers());for (int i\u003d0; i \u003c\u003d 20; i++) {for (int j\u003di + 1; j \u003c\u003d 20; j++) {assertEquals(expectedSet.subSet(i,false,j,false),asSet.subSet(i,false,j,false));assertEquals(expectedSet.subSet(i,true,j,false),asSet.subSet(i,true,j,false));assertEquals(expectedSet.subSet(i,false,j,true),asSet.subSet(i,false,j,true));assertEquals(expectedSet.subSet(i,true,j,true),asSet.subSet(i,true,j,true));}}}"},{"oldName":"testGCD","newName":"testGCDExhaustive","body":"{for (long a : POSITIVE_LONG_CANDIDATES) {for (long b : POSITIVE_LONG_CANDIDATES) {assertEquals(valueOf(a).gcd(valueOf(b)),valueOf(LongMath.gcd(a,b)));}}}"},{"oldName":"testAtEachSimpleSplit","newName":"testFixedLengthSimpleSplit","body":"{String simple\u003d\"abcde\";Iterable\u003cString\u003e letters\u003dSplitter.fixedLength(2).split(simple);ASSERT.that(letters).hasContentsInOrder(\"ab\",\"cd\",\"e\");}"},{"oldName":"testAtEachSplitEqualChunkLength","newName":"testFixedLengthSplitEqualChunkLength","body":"{String simple\u003d\"abcdef\";Iterable\u003cString\u003e letters\u003dSplitter.fixedLength(2).split(simple);ASSERT.that(letters).hasContentsInOrder(\"ab\",\"cd\",\"ef\");}"},{"oldName":"testAtEachSplitOnlyOneChunk","newName":"testFixedLengthSplitOnlyOneChunk","body":"{String simple\u003d\"abc\";Iterable\u003cString\u003e letters\u003dSplitter.fixedLength(3).split(simple);ASSERT.that(letters).hasContentsInOrder(\"abc\");}"},{"oldName":"testAtEachSplitSmallerString","newName":"testFixedLengthSplitSmallerString","body":"{String simple\u003d\"ab\";Iterable\u003cString\u003e letters\u003dSplitter.fixedLength(3).split(simple);ASSERT.that(letters).hasContentsInOrder(\"ab\");}"},{"oldName":"testAtEachSplitEmptyString","newName":"testFixedLengthSplitEmptyString","body":"{String simple\u003d\"\";Iterable\u003cString\u003e letters\u003dSplitter.fixedLength(3).split(simple);ASSERT.that(letters).hasContentsInOrder(\"\");}"},{"oldName":"testAtEachSplitEmptyStringWithOmitEmptyStrings","newName":"testFixedLengthSplitEmptyStringWithOmitEmptyStrings","body":"{ASSERT.that(Splitter.fixedLength(3).omitEmptyStrings().split(\"\")).isEmpty();}"},{"oldName":"testAtEachSplitIntoChars","newName":"testFixedLengthSplitIntoChars","body":"{String simple\u003d\"abcd\";Iterable\u003cString\u003e letters\u003dSplitter.fixedLength(1).split(simple);ASSERT.that(letters).hasContentsInOrder(\"a\",\"b\",\"c\",\"d\");}"},{"oldName":"testAtEachSplitZeroChunkLen","newName":"testFixedLengthSplitZeroChunkLen","body":"{try {Splitter.fixedLength(0);fail();} catch (IllegalArgumentException expected) {}}"},{"oldName":"testAtEachSplitNegativeChunkLen","newName":"testFixedLengthSplitNegativeChunkLen","body":"{try {Splitter.fixedLength(-1);fail();} catch (IllegalArgumentException expected) {}}"},{"oldName":"testEqualsAndValueOf","newName":"testEquals","body":"{EqualsTester equalsTester\u003dnew EqualsTester();for (int a : TEST_INTS) {long value\u003da \u0026 0xffffffffL;equalsTester.addEqualityGroup(UnsignedInteger.asUnsigned(a),UnsignedInteger.valueOf(value),UnsignedInteger.valueOf(Long.toString(value)),UnsignedInteger.valueOf(Long.toString(value,16),16));}equalsTester.testEquals();}"},{"oldName":"testEqualsAndValueOf","newName":"testEquals","body":"{EqualsTester equalsTester\u003dnew EqualsTester();for (long a : TEST_LONGS) {BigInteger big\u003d(a \u003e\u003d 0)?BigInteger.valueOf(a):BigInteger.valueOf(a).add(BigInteger.ZERO.setBit(64));equalsTester.addEqualityGroup(UnsignedLong.asUnsigned(a),UnsignedLong.valueOf(big),UnsignedLong.valueOf(big.toString()),UnsignedLong.valueOf(big.toString(16),16));}equalsTester.testEquals();}"},{"oldName":"testEquality","newName":"testEquals","body":"{new EqualsTester().addEqualityGroup(Equivalence.equals(),Equivalence.equals()).addEqualityGroup(Equivalence.identity(),Equivalence.identity()).testEquals();}"},{"oldName":"testNullChecksOnEnum","newName":"testNulls_enum","body":"{tester.testNulls(OneConstantEnum.class);tester.testNulls(NoConstantEnum.class);tester.testNulls(TimeUnit.class);}"},{"oldName":"testGreatestOf_simple","newName":"testGreatestOfIterable_simple","body":"{List\u003cInteger\u003e list\u003dArrays.asList(3,1,3,2,4,2,4,3);assertEquals(Arrays.asList(4,4,3,3),numberOrdering.greatestOf(list,4));}"},{"oldName":"testLeastOf_emptyList_0","newName":"testLeastOfIterable_empty_0","body":"{List\u003cInteger\u003e result\u003dnumberOrdering.leastOf(Arrays.\u003cInteger\u003easList(),0);assertTrue(result instanceof RandomAccess);assertListImmutable(result);assertEquals(ImmutableList.\u003cInteger\u003eof(),result);}"},{"oldName":"testLeastOf_emptyList_1","newName":"testLeastOfIterable_empty_1","body":"{List\u003cInteger\u003e result\u003dnumberOrdering.leastOf(Arrays.\u003cInteger\u003easList(),1);assertTrue(result instanceof RandomAccess);assertListImmutable(result);assertEquals(ImmutableList.\u003cInteger\u003eof(),result);}"},{"oldName":"testLeastOf_simple_negativeOne","newName":"testLeastOfIterable_simple_negativeOne","body":"{try {numberOrdering.leastOf(Arrays.asList(3,4,5,-1),-1);fail();} catch (IllegalArgumentException expected) {}}"},{"oldName":"testLeastOf_singletonList_0","newName":"testLeastOfIterable_singleton_0","body":"{List\u003cInteger\u003e result\u003dnumberOrdering.leastOf(Arrays.asList(3),0);assertTrue(result instanceof RandomAccess);assertListImmutable(result);assertEquals(ImmutableList.\u003cInteger\u003eof(),result);}"},{"oldName":"testLeastOf_simple_0","newName":"testLeastOfIterable_simple_0","body":"{List\u003cInteger\u003e result\u003dnumberOrdering.leastOf(Arrays.asList(3,4,5,-1),0);assertTrue(result instanceof RandomAccess);assertListImmutable(result);assertEquals(ImmutableList.\u003cInteger\u003eof(),result);}"},{"oldName":"testLeastOf_simple_1","newName":"testLeastOfIterable_simple_1","body":"{List\u003cInteger\u003e result\u003dnumberOrdering.leastOf(Arrays.asList(3,4,5,-1),1);assertTrue(result instanceof RandomAccess);assertListImmutable(result);assertEquals(ImmutableList.of(-1),result);}"},{"oldName":"testLeastOf_simple_nMinusOne_withNullElement","newName":"testLeastOfIterable_simple_nMinusOne_withNullElement","body":"{List\u003cInteger\u003e list\u003dArrays.asList(3,null,5,-1);List\u003cInteger\u003e result\u003dOrdering.natural().nullsLast().leastOf(list,list.size() - 1);assertTrue(result instanceof RandomAccess);assertListImmutable(result);assertEquals(ImmutableList.of(-1,3,5),result);}"},{"oldName":"testLeastOf_simple_nMinusOne","newName":"testLeastOfIterable_simple_nMinusOne","body":"{List\u003cInteger\u003e list\u003dArrays.asList(3,4,5,-1);List\u003cInteger\u003e result\u003dnumberOrdering.leastOf(list,list.size() - 1);assertTrue(result instanceof RandomAccess);assertListImmutable(result);assertEquals(ImmutableList.of(-1,3,4),result);}"},{"oldName":"testLeastOf_simple_n","newName":"testLeastOfIterable_simple_n","body":"{List\u003cInteger\u003e list\u003dArrays.asList(3,4,5,-1);List\u003cInteger\u003e result\u003dnumberOrdering.leastOf(list,list.size());assertTrue(result instanceof RandomAccess);assertListImmutable(result);assertEquals(ImmutableList.of(-1,3,4,5),result);}"},{"oldName":"testLeastOf_simple_n_withNullElement","newName":"testLeastOfIterable_simple_n_withNullElement","body":"{List\u003cInteger\u003e list\u003dArrays.asList(3,4,5,null,-1);List\u003cInteger\u003e result\u003dOrdering.natural().nullsLast().leastOf(list,list.size());assertTrue(result instanceof RandomAccess);assertListImmutable(result);assertEquals(Arrays.asList(-1,3,4,5,null),result);}"},{"oldName":"testLeastOf_simple_nPlusOne","newName":"testLeastOfIterable_simple_nPlusOne","body":"{List\u003cInteger\u003e list\u003dArrays.asList(3,4,5,-1);List\u003cInteger\u003e result\u003dnumberOrdering.leastOf(list,list.size() + 1);assertTrue(result instanceof RandomAccess);assertListImmutable(result);assertEquals(ImmutableList.of(-1,3,4,5),result);}"},{"oldName":"testLeastOf_ties","newName":"testLeastOfIterable_ties","body":"{Integer foo\u003dnew Integer(Integer.MAX_VALUE - 10);Integer bar\u003dnew Integer(Integer.MAX_VALUE - 10);assertNotSame(foo,bar);assertEquals(foo,bar);List\u003cInteger\u003e list\u003dArrays.asList(3,foo,bar,-1);List\u003cInteger\u003e result\u003dnumberOrdering.leastOf(list,list.size());assertEquals(ImmutableList.of(-1,3,foo,bar),result);}"},{"oldName":"testMark","newName":"testLimit_mark","body":"{byte [] big\u003dnewPreFilledByteArray(5);InputStream bin\u003dnew ByteArrayInputStream(big);InputStream lin\u003dByteStreams.limit(bin,2);int read\u003dlin.read();assertEquals(big[0],read);lin.mark(2);read\u003dlin.read();assertEquals(big[1],read);read\u003dlin.read();assertEquals(-1,read);lin.reset();read\u003dlin.read();assertEquals(big[1],read);read\u003dlin.read();assertEquals(-1,read);}"},{"oldName":"testSkip","newName":"testLimit_skip","body":"{byte [] big\u003dnewPreFilledByteArray(5);InputStream bin\u003dnew ByteArrayInputStream(big);InputStream lin\u003dByteStreams.limit(bin,2);lin.mark(2);assertEquals(2,lin.available());lin.skip(1);assertEquals(1,lin.available());lin.reset();assertEquals(2,lin.available());lin.skip(3);assertEquals(0,lin.available());}"},{"oldName":"testMarkNotSet","newName":"testLimit_markNotSet","body":"{byte [] big\u003dnewPreFilledByteArray(5);InputStream bin\u003dnew ByteArrayInputStream(big);InputStream lin\u003dByteStreams.limit(bin,2);try {lin.reset();fail();} catch (IOException expected) {assertEquals(\"Mark not set\",expected.getMessage());}}"},{"oldName":"testMarkNotSupported","newName":"testLimit_markNotSupported","body":"{InputStream lin\u003dByteStreams.limit(new UnmarkableInputStream(),2);try {lin.reset();fail();} catch (IOException expected) {assertEquals(\"Mark not supported\",expected.getMessage());}}"},{"oldName":"test","newName":"testExhaustive","body":"{List\u003cHasher\u003e hashers\u003dImmutableList.of(new StreamingVersion().newHasher(),new StreamingVersion().newHasher(52),new NonStreamingVersion().newHasher(),new NonStreamingVersion().newHasher(123));Random random\u003dnew Random(0);for (int i\u003d0; i \u003c 200; i++) {RandomHasherAction.pickAtRandom(random).performAction(random,hashers);}HashCode [] codes\u003dnew HashCode[hashers.size()];for (int i\u003d0; i \u003c hashers.size(); i++) {codes[i]\u003dhashers.get(i).hash();}for (int i\u003d1; i \u003c codes.length; i++) {assertEquals(codes[i - 1],codes[i]);}}"},{"oldName":"testParseLongWithRadix","newName":"testParseIntWithRadix","body":"{for (long a : UNSIGNED_INTS) {for (int radix\u003dCharacter.MIN_RADIX; radix \u003c\u003d Character.MAX_RADIX; radix++) {assertEquals((int)a,UnsignedInts.parseUnsignedInt(Long.toString(a,radix),radix));}}for (int radix\u003dCharacter.MIN_RADIX; radix \u003c\u003d Character.MAX_RADIX; radix++) {String maxAsString\u003dLong.toString((1L \u003c\u003c 32) - 1,radix);assertEquals(-1,UnsignedInts.parseUnsignedInt(maxAsString,radix));try {long overflow\u003d1L \u003c\u003c 32;String overflowAsString\u003dLong.toString(overflow,radix);UnsignedInts.parseUnsignedInt(overflowAsString,radix);fail();} catch (NumberFormatException expected) {}}}"},{"oldName":"testSerialization","newName":"testJavaSerialization","body":"{BloomFilter\u003cbyte []\u003e bf\u003dBloomFilter.create(Funnels.byteArrayFunnel(),100);for (int i\u003d0; i \u003c 10; i++) {bf.put(Ints.toByteArray(i));}bf\u003dSerializableTester.reserialize(bf);for (int i\u003d0; i \u003c 10; i++) {assertTrue(bf.mightContain(Ints.toByteArray(i)));}}"},{"oldName":"testIndexOf","newName":"testIndexOf_arrays","body":"{assertEquals(-1,Booleans.indexOf(EMPTY,false));assertEquals(-1,Booleans.indexOf(ARRAY_FALSE,true));assertEquals(-1,Booleans.indexOf(ARRAY_FALSE_FALSE,true));assertEquals(0,Booleans.indexOf(ARRAY_FALSE,false));assertEquals(0,Booleans.indexOf(ARRAY_FALSE_TRUE,false));assertEquals(1,Booleans.indexOf(ARRAY_FALSE_TRUE,true));assertEquals(2,Booleans.indexOf(new boolean[]{false,false,true},true));}"},{"oldName":"testTransformValueRemainsMemoized_Future","newName":"testTransformValueRemainsMemoized_ListenableFuture","body":"{class Holder {int value\u003d2;}final Holder holder\u003dnew Holder();Function\u003cInteger,Integer\u003e adder\u003dnew Function\u003cInteger,Integer\u003e(){@Override public Integer apply(Integer from){return from + holder.value;}};assertEquals(6,adder.apply(4).intValue());ListenableFuture\u003cInteger\u003e immediateFuture\u003dFutures.immediateFuture(4);Future\u003cInteger\u003e transformedFuture\u003dFutures.transform(immediateFuture,adder);assertEquals(6,transformedFuture.get().intValue());holder.value\u003d3;assertEquals(6,transformedFuture.get().intValue());assertEquals(7,adder.apply(4).intValue());holder.value\u003d4;assertEquals(6,transformedFuture.get().intValue());assertEquals(8,adder.apply(4).intValue());assertEquals(6,transformedFuture.get(1000,TimeUnit.SECONDS).intValue());assertEquals(8,Futures.transform(immediateFuture,adder).get().intValue());assertEquals(8,Futures.transform(immediateFuture,adder).get(1000,TimeUnit.SECONDS).intValue());}"},{"oldName":"testChain_genericsNull","newName":"testChain_genericsWildcard","body":"{ListenableFuture\u003c?\u003e nullFuture\u003dFutures.immediateFuture(null);ListenableFuture\u003c?\u003e chainedFuture\u003dFutures.chain(nullFuture,Functions.constant(nullFuture));assertNull(chainedFuture.get());}"},{"oldName":"test_0","newName":"test_obj","body":"{String json\u003d\"{\\\"v1\\\":-0.012671709,\\\"v2\\\":0.22676692048907365,\\\"v3\\\":0.13231707,\\\"v4\\\":0.80090785,\\\"v5\\\":0.6192943}\";String json2\u003d\"{\\\"v1\\\":\\\"-0.012671709\\\",\\\"v2\\\":\\\"0.22676692048907365\\\",\\\"v3\\\":\\\"0.13231707\\\",\\\"v4\\\":\\\"0.80090785\\\",\\\"v5\\\":\\\"0.6192943\\\"}\";Model m1\u003dJSON.parseObject(json,Model.class);Model m2\u003dJSON.parseObject(json2,Model.class);assertNotNull(m1);assertNotNull(m2);assertEquals(-0.012671709D,m1.v1);assertEquals(0.22676692048907365D,m1.v2);assertEquals(0.13231707D,m1.v3);assertEquals(0.80090785D,m1.v4);assertEquals(0.6192943D,m1.v5);assertEquals(-0.012671709D,m2.v1);assertEquals(0.22676692048907365D,m2.v2);assertEquals(0.13231707D,m2.v3);assertEquals(0.80090785D,m2.v4);assertEquals(0.6192943D,m2.v5);}"},{"oldName":"test_0","newName":"test_obj","body":"{String json\u003d\"{\\\"v1\\\":-0.012671709,\\\"v2\\\":0.22676692048907365,\\\"v3\\\":0.13231707,\\\"v4\\\":0.80090785,\\\"v5\\\":0.6192943}\";String json2\u003d\"{\\\"v1\\\":\\\"-0.012671709\\\",\\\"v2\\\":\\\"0.22676692048907365\\\",\\\"v3\\\":\\\"0.13231707\\\",\\\"v4\\\":\\\"0.80090785\\\",\\\"v5\\\":\\\"0.6192943\\\"}\";Model m1\u003dJSON.parseObject(json,Model.class);Model m2\u003dJSON.parseObject(json2,Model.class);assertNotNull(m1);assertNotNull(m2);assertEquals(-0.012671709D,m1.v1);assertEquals(0.22676692048907365D,m1.v2);assertEquals(0.13231707D,m1.v3);assertEquals(0.80090785D,m1.v4);assertEquals(0.6192943D,m1.v5);assertEquals(-0.012671709D,m2.v1);assertEquals(0.22676692048907365D,m2.v2);assertEquals(0.13231707D,m2.v3);assertEquals(0.80090785D,m2.v4);assertEquals(0.6192943D,m2.v5);}"},{"oldName":"test_4","newName":"test_5","body":"{User user\u003dnew User(1,\"土豆\",25);byte [] serializedValue\u003dserializer.serialize(user);Arrays.sort(serializedValue);Assert.assertNull(serializer.deserialize(serializedValue));}"},{"oldName":"test_4","newName":"test_5","body":"{User user\u003dnew User(1,\"土豆\",25);byte [] serializedValue\u003dserializer.serialize(user);Arrays.sort(serializedValue);serializer.deserialize(serializedValue);}"},{"oldName":"test_4","newName":"test_5","body":"{User user\u003dnew User(1,\"土豆\",25);byte [] serializedValue\u003dserializer.serialize(user);Arrays.sort(serializedValue);Assert.assertNull(serializer.deserialize(serializedValue));}"},{"oldName":"test_4","newName":"test_5","body":"{User user\u003dnew User(1,\"土豆\",25);byte [] serializedValue\u003dserializer.serialize(user);Arrays.sort(serializedValue);serializer.deserialize(serializedValue);}"},{"oldName":"test_for_issue","newName":"test_for_issue_2","body":"{JSONObject object\u003dnew JSONObject();object.put(\"345_xiu\",\"abc\");assertEquals(\"abc\",JSONPath.eval(object,\"$.345_xiu\"));}"},{"oldName":"test_for_issue","newName":"test_for_issue_2","body":"{JSONObject object\u003dnew JSONObject();object.put(\"345_xiu\",\"abc\");assertEquals(\"abc\",JSONPath.eval(object,\"$.345_xiu\"));}"},{"oldName":"test_list_map","newName":"test_list_size","body":"{List list\u003dnew ArrayList();list.add(new Object());list.add(new Object());list.add(new Object());JSONPath path\u003dnew JSONPath(\"$.size()\");Integer result\u003d(Integer)path.eval(list);Assert.assertEquals(list.size(),result.intValue());}"},{"oldName":"test_list_map","newName":"test_list_size","body":"{List list\u003dnew ArrayList();list.add(new Object());list.add(new Object());list.add(new Object());JSONPath path\u003dnew JSONPath(\"$.size()\");Integer result\u003d(Integer)path.eval(list);Assert.assertEquals(list.size(),result.intValue());}"},{"oldName":"test_0","newName":"test_null","body":"{String text\u003d\"{\\\"calendar\\\":null}\";VO vo\u003dJSON.parseObject(text,VO.class);Assert.assertNull(vo.getCalendar());}"},{"oldName":"test_0","newName":"test_null","body":"{String text\u003d\"{\\\"calendar\\\":null}\";VO vo\u003dJSON.parseObject(text,VO.class);Assert.assertNull(vo.getCalendar());}"},{"oldName":"test_long_error_0","newName":"test_int_error_0","body":"{Exception error\u003dnull;try {JSONReader reader\u003dnew JSONReader(new StringReader(\"{\\\"value\\\":1.A}\"));reader.readObject(Model.class);} catch (JSONException ex) {error\u003dex;}Assert.assertNotNull(error);}"},{"oldName":"test_long_error_2","newName":"test_int_error_2","body":"{Exception error\u003dnull;try {JSONReader reader\u003dnew JSONReader(new StringReader(\"{\\\"value\\\":AA}\"));reader.readObject(Model.class);} catch (JSONException ex) {error\u003dex;}Assert.assertNotNull(error);}"},{"oldName":"test_long_normal","newName":"test_int_normal","body":"{JSONReader reader\u003dnew JSONReader(new StringReader(\"{\\\"value\\\":1001,\\\"value2\\\":-2001}\"));Model model\u003dreader.readObject(Model.class);Assert.assertEquals(1001,model.value);Assert.assertEquals(-2001,model.value2);reader.close();}"},{"oldName":"test_long_normal_2","newName":"test_int_normal_2","body":"{JSONReader reader\u003dnew JSONReader(new StringReader(\"{\\\"model\\\":{\\\"value\\\":3001,\\\"value2\\\":-4001}}\"));Map\u003cString,Model\u003e map\u003dreader.readObject(new TypeReference\u003cMap\u003cString,Model\u003e\u003e(){});Model model\u003dmap.get(\"model\");Assert.assertEquals(3001,model.value);Assert.assertEquals(-4001,model.value2);reader.close();}"},{"oldName":"test_long_error_map","newName":"test_int_error_map","body":"{Exception error\u003dnull;try {JSONReader reader\u003dnew JSONReader(new StringReader(\"{\\\"model\\\":{\\\"value\\\":3001,\\\"value2\\\":-4001}[\"));reader.readObject(new TypeReference\u003cMap\u003cString,Model\u003e\u003e(){});} catch (JSONException ex) {error\u003dex;}Assert.assertNotNull(error);}"},{"oldName":"test_long_error_end","newName":"test_int_error_end","body":"{Exception error\u003dnull;try {JSONReader reader\u003dnew JSONReader(new StringReader(\"{\\\"value\\\":1001,\\\"value2\\\":-2001[\"));reader.readObject(Model.class);} catch (JSONException ex) {error\u003dex;}Assert.assertNotNull(error);}"},{"oldName":"test_long_error_0","newName":"test_int_error_0","body":"{Exception error\u003dnull;try {JSONReader reader\u003dnew JSONReader(new StringReader(\"{\\\"value\\\":1.A}\"));reader.readObject(Model.class);} catch (JSONException ex) {error\u003dex;}Assert.assertNotNull(error);}"},{"oldName":"test_long_error_2","newName":"test_int_error_2","body":"{Exception error\u003dnull;try {JSONReader reader\u003dnew JSONReader(new StringReader(\"{\\\"value\\\":AA}\"));reader.readObject(Model.class);} catch (JSONException ex) {error\u003dex;}Assert.assertNotNull(error);}"},{"oldName":"test_long_normal","newName":"test_int_normal","body":"{JSONReader reader\u003dnew JSONReader(new StringReader(\"{\\\"value\\\":1001,\\\"value2\\\":-2001}\"));Model model\u003dreader.readObject(Model.class);Assert.assertEquals(1001,model.value);Assert.assertEquals(-2001,model.value2);reader.close();}"},{"oldName":"test_long_normal_2","newName":"test_int_normal_2","body":"{JSONReader reader\u003dnew JSONReader(new StringReader(\"{\\\"model\\\":{\\\"value\\\":3001,\\\"value2\\\":-4001}}\"));Map\u003cString,Model\u003e map\u003dreader.readObject(new TypeReference\u003cMap\u003cString,Model\u003e\u003e(){});Model model\u003dmap.get(\"model\");Assert.assertEquals(3001,model.value);Assert.assertEquals(-4001,model.value2);reader.close();}"},{"oldName":"test_long_error_map","newName":"test_int_error_map","body":"{Exception error\u003dnull;try {JSONReader reader\u003dnew JSONReader(new StringReader(\"{\\\"model\\\":{\\\"value\\\":3001,\\\"value2\\\":-4001}[\"));reader.readObject(new TypeReference\u003cMap\u003cString,Model\u003e\u003e(){});} catch (JSONException ex) {error\u003dex;}Assert.assertNotNull(error);}"},{"oldName":"test_long_error_end","newName":"test_int_error_end","body":"{Exception error\u003dnull;try {JSONReader reader\u003dnew JSONReader(new StringReader(\"{\\\"value\\\":1001,\\\"value2\\\":-2001[\"));reader.readObject(Model.class);} catch (JSONException ex) {error\u003dex;}Assert.assertNotNull(error);}"},{"oldName":"test_bool","newName":"test_int","body":"{Model model\u003dJSON.parseObject(\"[-100,100]\",Model.class,Feature.SupportArrayToBean);Assert.assertEquals(-100L,model.v1);Assert.assertEquals(100L,model.v2);}"},{"oldName":"test_bool_error","newName":"test_int_error","body":"{Exception error\u003dnull;try {JSON.parseObject(\"[-\",Model.class,Feature.SupportArrayToBean);} catch (JSONException ex) {error\u003dex;}Assert.assertNotNull(error);}"},{"oldName":"test_bool_error_max","newName":"test_int_error_max","body":"{Exception error\u003dnull;try {JSON.parseObject(\"[1,92233720368547758000}\",Model.class,Feature.SupportArrayToBean);} catch (JSONException ex) {error\u003dex;}Assert.assertNotNull(error);}"},{"oldName":"test_bool","newName":"test_long","body":"{Model model\u003dJSON.parseObject(\"[-100,100]\",Model.class,Feature.SupportArrayToBean);Assert.assertEquals(-100L,model.v1);Assert.assertEquals(100L,model.v2);}"},{"oldName":"test_bool_error","newName":"test_long_error","body":"{Exception error\u003dnull;try {JSON.parseObject(\"[-\",Model.class,Feature.SupportArrayToBean);} catch (JSONException ex) {error\u003dex;}Assert.assertNotNull(error);}"},{"oldName":"test_bool_error_max","newName":"test_long_error_max","body":"{Exception error\u003dnull;try {JSON.parseObject(\"[1,92233720368547758000}\",Model.class,Feature.SupportArrayToBean);} catch (JSONException ex) {error\u003dex;}Assert.assertNotNull(error);}"},{"oldName":"test_bool_error_min","newName":"test_long_error_min","body":"{Exception error\u003dnull;try {JSON.parseObject(\"[1,-92233720368547758000}\",Model.class,Feature.SupportArrayToBean);} catch (JSONException ex) {error\u003dex;}Assert.assertNotNull(error);}"},{"oldName":"test_bool","newName":"test_int","body":"{Model model\u003dJSON.parseObject(\"[-100,100]\",Model.class,Feature.SupportArrayToBean);Assert.assertEquals(-100L,model.v1);Assert.assertEquals(100L,model.v2);}"},{"oldName":"test_bool_error","newName":"test_int_error","body":"{Exception error\u003dnull;try {JSON.parseObject(\"[-\",Model.class,Feature.SupportArrayToBean);} catch (JSONException ex) {error\u003dex;}Assert.assertNotNull(error);}"},{"oldName":"test_bool_error_max","newName":"test_int_error_max","body":"{Exception error\u003dnull;try {JSON.parseObject(\"[1,92233720368547758000}\",Model.class,Feature.SupportArrayToBean);} catch (JSONException ex) {error\u003dex;}Assert.assertNotNull(error);}"},{"oldName":"test_bool","newName":"test_long","body":"{Model model\u003dJSON.parseObject(\"[-100,100]\",Model.class,Feature.SupportArrayToBean);Assert.assertEquals(-100L,model.v1);Assert.assertEquals(100L,model.v2);}"},{"oldName":"test_bool_error","newName":"test_long_error","body":"{Exception error\u003dnull;try {JSON.parseObject(\"[-\",Model.class,Feature.SupportArrayToBean);} catch (JSONException ex) {error\u003dex;}Assert.assertNotNull(error);}"},{"oldName":"test_bool_error_max","newName":"test_long_error_max","body":"{Exception error\u003dnull;try {JSON.parseObject(\"[1,92233720368547758000}\",Model.class,Feature.SupportArrayToBean);} catch (JSONException ex) {error\u003dex;}Assert.assertNotNull(error);}"},{"oldName":"test_bool_error_min","newName":"test_long_error_min","body":"{Exception error\u003dnull;try {JSON.parseObject(\"[1,-92233720368547758000}\",Model.class,Feature.SupportArrayToBean);} catch (JSONException ex) {error\u003dex;}Assert.assertNotNull(error);}"},{"oldName":"test_bool","newName":"test_int","body":"{Model model\u003dJSON.parseObject(\"[-100,100]\",Model.class,Feature.SupportArrayToBean);Assert.assertEquals(-100L,model.v1);Assert.assertEquals(100L,model.v2);}"},{"oldName":"test_bool_error","newName":"test_int_error","body":"{Exception error\u003dnull;try {JSON.parseObject(\"[-\",Model.class,Feature.SupportArrayToBean);} catch (JSONException ex) {error\u003dex;}Assert.assertNotNull(error);}"},{"oldName":"test_bool_error_max","newName":"test_int_error_max","body":"{Exception error\u003dnull;try {JSON.parseObject(\"[1,92233720368547758000}\",Model.class,Feature.SupportArrayToBean);} catch (JSONException ex) {error\u003dex;}Assert.assertNotNull(error);}"},{"oldName":"test_bool","newName":"test_long","body":"{Model model\u003dJSON.parseObject(\"[-100,100]\",Model.class,Feature.SupportArrayToBean);Assert.assertEquals(-100L,model.v1);Assert.assertEquals(100L,model.v2);}"},{"oldName":"test_bool_error","newName":"test_long_error","body":"{Exception error\u003dnull;try {JSON.parseObject(\"[-\",Model.class,Feature.SupportArrayToBean);} catch (JSONException ex) {error\u003dex;}Assert.assertNotNull(error);}"},{"oldName":"test_bool_error_max","newName":"test_long_error_max","body":"{Exception error\u003dnull;try {JSON.parseObject(\"[1,92233720368547758000}\",Model.class,Feature.SupportArrayToBean);} catch (JSONException ex) {error\u003dex;}Assert.assertNotNull(error);}"},{"oldName":"test_bool_error_min","newName":"test_long_error_min","body":"{Exception error\u003dnull;try {JSON.parseObject(\"[1,-92233720368547758000}\",Model.class,Feature.SupportArrayToBean);} catch (JSONException ex) {error\u003dex;}Assert.assertNotNull(error);}"},{"oldName":"test_codec","newName":"test_codec_false","body":"{VO vo\u003dnew VO();vo.id\u003dfalse;String str\u003dJSON.toJSONString(vo);VO vo1\u003dJSON.parseObject(str,VO.class);Assert.assertTrue(vo1.id \u003d\u003d vo.id);}"},{"oldName":"test_parserError","newName":"test_parserUndefined","body":"{String jsonString\u003d\"{PayStatus:0,RunEmpId:undefined}\";Object json\u003dJSON.parse(jsonString);Assert.assertEquals(\"{\\\"PayStatus\\\":0}\",json.toString());}"},{"oldName":"test_parserError","newName":"test_parserUndefined","body":"{String jsonString\u003d\"{PayStatus:0,RunEmpId:undefined}\";Object json\u003dJSON.parse(jsonString);Assert.assertEquals(\"{\\\"PayStatus\\\":0}\",json.toString());}"},{"oldName":"test_parserError","newName":"test_parserUndefined","body":"{String jsonString\u003d\"{PayStatus:0,RunEmpId:undefined}\";Object json\u003dJSON.parse(jsonString);Assert.assertEquals(\"{\\\"PayStatus\\\":0}\",json.toString());}"},{"oldName":"test_for_issue","newName":"test_for_issue_private","body":"{VO vo\u003dnew VO();vo.units\u003dEnumSet.of(TimeUnit.DAYS,TimeUnit.HOURS);String text\u003dJSON.toJSONString(vo);Assert.assertEquals(\"{\\\"units\\\":[\\\"HOURS\\\",\\\"DAYS\\\"]}\",text);VO vo1\u003dJSON.parseObject(text,VO.class);Assert.assertNotNull(vo1);Assert.assertEquals(vo.units,vo1.units);}"},{"oldName":"test_for_issue","newName":"test_for_issue_private","body":"{VO vo\u003dnew VO();vo.units\u003dEnumSet.of(TimeUnit.DAYS,TimeUnit.HOURS);String text\u003dJSON.toJSONString(vo);Assert.assertEquals(\"{\\\"units\\\":[\\\"HOURS\\\",\\\"DAYS\\\"]}\",text);VO vo1\u003dJSON.parseObject(text,VO.class);Assert.assertNotNull(vo1);Assert.assertEquals(vo.units,vo1.units);}"},{"oldName":"test_for_issue_1","newName":"test_for_issue_private","body":"{List\u003cV1\u003e list\u003dJSON.parseArray(\"[{\\\"value\\\":null}]\",V1.class);Assert.assertEquals(1,list.size());Assert.assertEquals(false,list.get(0).value);}"},{"oldName":"test_for_issue_1","newName":"test_for_issue_private","body":"{List\u003cV1\u003e list\u003dJSON.parseArray(\"[{\\\"value\\\":null}]\",V1.class);Assert.assertEquals(1,list.size());Assert.assertEquals(false,list.get(0).value);}"},{"oldName":"test_for_issue_1","newName":"test_for_issue_private","body":"{List\u003cV1\u003e list\u003dJSON.parseArray(\"[{\\\"value\\\":null}]\",V1.class);Assert.assertEquals(1,list.size());Assert.assertEquals(false,list.get(0).value);}"},{"oldName":"test_emptyIgnore","newName":"test_for_issue","body":"{String text\u003d\"{\\\"value\\\":2147483649}\";Exception error\u003dnull;try {JSON.parseObject(text,VO.class);} catch (JSONException ex) {error\u003dex;}Assert.assertNotNull(error);Assert.assertTrue(error.getMessage().contains(\"field : value\"));}"},{"oldName":"test_a","newName":"test_list","body":"{A a\u003dnew A();DefaultJSONParser parser\u003dnew DefaultJSONParser(\"{\\\"values\\\":[]}\",ParserConfig.getGlobalInstance());parser.parseObject(a);parser.close();}"},{"oldName":"test_a","newName":"test_list","body":"{A a\u003dnew A();DefaultJSONParser parser\u003dnew DefaultJSONParser(\"{\\\"values\\\":[]}\",ParserConfig.getGlobalInstance());parser.parseObject(a);parser.close();}"},{"oldName":"test_0","newName":"test_a","body":"{A a\u003dnew A();DefaultJSONParser parser\u003dnew DefaultJSONParser(\"{\\\"values\\\":[]}\",ParserConfig.getGlobalInstance());parser.parseObject(a);parser.close();}"},{"oldName":"test_0","newName":"test_a","body":"{A a\u003dnew A();DefaultJSONParser parser\u003dnew DefaultJSONParser(\"{\\\"values\\\":[]}\",ParserConfig.getGlobalInstance());parser.parseObject(a);parser.close();}"},{"oldName":"test_list","newName":"test_writeClassName","body":"{A a\u003dnew A();a.setB(new B());String text\u003dJSON.toJSONString(a,SerializerFeature.WriteClassName);System.out.println(text);Assert.assertEquals(\"{\\\"@type\\\":\\\"com.alibaba.json.test.bvt.writeClassName.WriteClassNameTest2$A\\\",\\\"b\\\":{\\\"id\\\":0}}\",text);A a1\u003d(A)JSON.parse(text);Assert.assertNotNull(a1.getB());}"},{"oldName":"test_list","newName":"test_writeClassName","body":"{A a\u003dnew A();a.setB(new B());String text\u003dJSON.toJSONString(a,SerializerFeature.WriteClassName);System.out.println(text);Assert.assertEquals(\"{\\\"@type\\\":\\\"com.alibaba.json.test.bvt.writeClassName.WriteClassNameTest2$A\\\",\\\"b\\\":{\\\"id\\\":0}}\",text);A a1\u003d(A)JSON.parse(text);Assert.assertNotNull(a1.getB());}"},{"oldName":"shouldReportTooLittleInvocationsInOrder","newName":"shouldReportTooFewInvocationsInOrder","body":"{InOrderContext context\u003dnew InOrderContextImpl();Invocation invocation\u003dnew InvocationBuilder().simpleMethod().toInvocation();Invocation invocationTwo\u003dnew InvocationBuilder().differentMethod().toInvocation();exception.expect(VerificationInOrderFailure.class);exception.expectMessage(\"iMethods.simpleMethod()\");exception.expectMessage(\"Wanted *at least* 2 times\");exception.expectMessage(\"But was 1 time\");checkAtLeastNumberOfInvocations(asList(invocation,invocationTwo),new InvocationMatcher(invocation),2,context);}"},{"oldName":"shouldReportTooLittleInvocations","newName":"shouldReportTooFewInvocations","body":"{Invocation first\u003dbuildSimpleMethod().toInvocation();Invocation second\u003dbuildSimpleMethod().toInvocation();wanted\u003dbuildSimpleMethod().toInvocationMatcher();invocations\u003dasList(first,second);exception.expect(VerificationInOrderFailure.class);exception.expectMessage(\"mock.simpleMethod()\");exception.expectMessage(\"Wanted 4 times\");exception.expectMessage(\"But was 2 times\");NumberOfInvocationsChecker.checkNumberOfInvocations(invocations,wanted,4,context);}"},{"oldName":"shouldReportTooLittleActual","newName":"shouldReportTooFewActual","body":"{wanted\u003dbuildSimpleMethod().toInvocationMatcher();invocations\u003dasList(buildSimpleMethod().toInvocation(),buildSimpleMethod().toInvocation());exception.expect(VerificationInOrderFailure.class);exception.expectMessage(\"mock.simpleMethod()\");exception.expectMessage(\"Wanted 100 times\");exception.expectMessage(\"But was 2 times\");NumberOfInvocationsChecker.checkNumberOfInvocations(invocations,wanted,100,context);}"},{"oldName":"shouldSayTooLittleInvocations","newName":"shouldSayTooFewInvocations","body":"{mock.simpleMethod();verify(mock,times(2)).simpleMethod();}"},{"oldName":"shouldSayTooLittleInvocationsInOrder","newName":"shouldSayTooFewInvocationsInOrder","body":"{mock.simpleMethod();mock.otherMethod();mock.otherMethod();InOrder inOrder\u003dinOrder(mock);inOrder.verify(mock).simpleMethod();inOrder.verify(mock,times(3)).otherMethod();}"},{"oldName":"shouldSayTooLittleInvocationsInAtLeastModeInOrder","newName":"shouldSayTooFewInvocationsInAtLeastModeInOrder","body":"{mock.simpleMethod();InOrder inOrder\u003dinOrder(mock);inOrder.verify(mock,atLeast(2)).simpleMethod();}"},{"oldName":"shouldSayTooLittleInvocationsInAtLeastMode","newName":"shouldSayTooFewInvocationsInAtLeastMode","body":"{mock.simpleMethod();verify(mock,atLeast(2)).simpleMethod();}"},{"oldName":"shouldPointToThirdChunkWhenTooLittleActualInvocations","newName":"shouldPointToThirdChunkWhenTooFewActualInvocations","body":"{inOrder.verify(mock,times(2)).simpleMethod(anyInt());inOrder.verify(mockTwo,times(2)).simpleMethod(anyInt());inOrder.verify(mock,atLeastOnce()).simpleMethod(anyInt());try {inOrder.verify(mockTwo,times(3)).simpleMethod(999);fail();} catch (VerificationInOrderFailure e) {assertThat(e).hasMessageContaining(\"thirdChunk(\");}}"},{"oldName":"shouldPrintTooLittleInvocations","newName":"shouldPrintTooFewInvocations","body":"{two.simpleMethod(2);inOrder.verify(one,atLeastOnce()).simpleMethod(anyInt());inOrder.verify(two,times(2)).simpleMethod(2);inOrder.verify(three,atLeastOnce()).simpleMethod(3);try {inOrder.verify(two,times(2)).simpleMethod(2);fail();} catch (VerificationInOrderFailure e) {String expectedMessage\u003d\"\\n\" + \"Verification in order failure:\" + \"\\n\"+ \"iMethods.simpleMethod(2);\"+ \"\\n\"+ \"Wanted 2 times:\"+ \"\\n\"+ \"-\u003e at\";assertThat(e).hasMessageContaining(expectedMessage);String expectedCause\u003d\"\\n\" + \"But was 1 time:\" + \"\\n\"+ \"-\u003e at\";assertThat(e).hasMessageContaining(expectedCause);}}"},{"oldName":"shouldThrowTooLittleInvocationsForMockTwo","newName":"shouldThrowTooFewInvocationsForMockTwo","body":"{InOrder inOrder\u003dinOrder(mockTwo);try {inOrder.verify(mockTwo,times(4)).simpleMethod(2);fail();} catch (VerificationInOrderFailure e) {}}"},{"oldName":"test","newName":"this_test_is_NOT_supposed_to_fail","body":"{assertTrue(true);}"},{"oldName":"test","newName":"this_test_is_supposed_to_fail","body":"{assertNotNull(system);}"},{"oldName":"can_match_on_equals","newName":"can_match_on_equals_matcher","body":"{IMethods mock\u003dmock(IMethods.class);when((Function\u003cString,String\u003e)mock::oneArg).invokedWith(\"Hello World\").thenAnswer((string) -\u003e string + \"!\");assertThat(mock.oneArg(\"Hello World\")).isEqualTo(\"Hello World!\");}"},{"oldName":"can_match_on_equals_with_primitive","newName":"can_match_on_equals_with_primitive_matcher","body":"{IMethods mock\u003dmock(IMethods.class);when(mock::intArgumentReturningInt).invokedWith(5).thenAnswer((integer) -\u003e integer + 3);assertThat(mock.intArgumentReturningInt(5)).isEqualTo(8);}"},{"oldName":"test","newName":"should_not_throw_class_cast_exception","body":"{given(testCollectionSourceProvider.getCollection(new ArrayList\u003cInteger\u003e())).willReturn(new ArrayList\u003cInteger\u003e());}"},{"oldName":"should_return_empty_string","newName":"shouldReturnEmptyString","body":"{assertEquals(\"\",rv.returnValueFor(String.class));}"},{"oldName":"decamelizeMatcher","newName":"decamelizes_matcher","body":"{assertEquals(\"\u003cSentence with strong language\u003e\",StringUtil.decamelizeMatcher(\"SentenceWithStrongLanguage\"));assertEquals(\"\u003cW e i r d o 1\u003e\",StringUtil.decamelizeMatcher(\"WEIRDO1\"));assertEquals(\"\u003c_\u003e\",StringUtil.decamelizeMatcher(\"_\"));assertEquals(\"\u003cHas exactly 3 elements\u003e\",StringUtil.decamelizeMatcher(\"HasExactly3Elements\"));assertEquals(\"\u003ccustom argument matcher\u003e\",StringUtil.decamelizeMatcher(\"\"));}"},{"oldName":"join_singleLine","newName":"joins_single_line","body":"{assertThat(StringUtil.join(\"line1\")).hasLineCount(2);}"},{"oldName":"join_twoLines","newName":"joins_two_lines","body":"{assertThat(StringUtil.join(\"line1\",\"line2\")).hasLineCount(3);}"},{"oldName":"removeFirstLine","newName":"removes_first_line","body":"{assertThat(StringUtil.removeFirstLine(\"line1\\nline2\")).isEqualTo(\"line2\");}"},{"oldName":"stubbing_argument_mismatch","newName":"unnecessary_stubbing","body":"{given(mock.simpleMethod(\"1\")).willReturn(\"one\");throw new IllegalStateException();}"},{"oldName":"test2","newName":"mismatch","body":"{given(mock.simpleMethod(2)).willReturn(\"\");mock.simpleMethod(3);}"},{"oldName":"unfinished_stubbing","newName":"unfinished_stubbing_test_method","body":"{when(list.get(0));}"},{"oldName":"unfinished_stubbing","newName":"unfinished_stubbing_test_method","body":"{when(list.get(0));}"},{"oldName":"testInjectMocks","newName":"no_warning_for_stubbing_arg_mismatch","body":"{when(mock.simpleMethod(1)).thenReturn(\"1\");mock.simpleMethod(2);}"},{"oldName":"provides_stubbings_of_mock","newName":"provides_stubbings_of_mock_in_declaration_order","body":"{when(mock.simpleMethod(1)).thenReturn(\"1\");when(mock.otherMethod()).thenReturn(\"2\");Collection\u003cStubbing\u003e stubbings\u003dmockingDetails(mock).getStubbings();assertEquals(2,stubbings.size());assertEquals(\"[mock.simpleMethod(1); stubbed with: [Returns: 1], mock.otherMethod(); stubbed with: [Returns: 2]]\",stubbings.toString());}"},{"oldName":"forAndroidResourceUriWithId","newName":"forAndroidBitmapResourceUriWithId","body":"{Action action\u003dmockAction(RESOURCE_ID_URI_KEY,RESOURCE_ID_URI);BitmapHunter hunter\u003dforRequest(mockPicasso(new ResourceRequestHandler(context)),dispatcher,cache,stats,action);assertThat(hunter.requestHandler).isInstanceOf(ResourceRequestHandler.class);}"},{"oldName":"forAndroidResourceUriWithType","newName":"forAndroidBitmapResourceUriWithType","body":"{Action action\u003dmockAction(RESOURCE_TYPE_URI_KEY,RESOURCE_TYPE_URI);BitmapHunter hunter\u003dforRequest(mockPicasso(new ResourceRequestHandler(context)),dispatcher,cache,stats,action);assertThat(hunter.requestHandler).isInstanceOf(ResourceRequestHandler.class);}"},{"oldName":"cancelRemovesAttachListener","newName":"cancelWhileAttachedRemovesAttachListener","body":"{ImageView target\u003dmockFitImageViewTarget(true);DeferredRequestCreator request\u003dnew DeferredRequestCreator(mock(RequestCreator.class),target);verify(target).addOnAttachStateChangeListener(attachListenerCaptor.capture());request.cancel();verify(target).removeOnAttachStateChangeListener(attachListenerCaptor.getValue());}"},{"oldName":"initAttachesLayoutListener","newName":"initAttachesLayoutListenerApi11","body":"{ImageView target\u003dmockFitImageViewTarget(true);ViewTreeObserver observer\u003dtarget.getViewTreeObserver();DeferredRequestCreator request\u003dnew DeferredRequestCreator(mock(RequestCreator.class),target);verify(observer).addOnPreDrawListener(request);}"},{"oldName":"cancelRemovesLayoutListener","newName":"cancelRemovesLayoutListenerApi11","body":"{ImageView target\u003dmockFitImageViewTarget(true);ViewTreeObserver observer\u003dtarget.getViewTreeObserver();DeferredRequestCreator request\u003dnew DeferredRequestCreator(mock(RequestCreator.class),target);request.cancel();verify(observer).removeOnPreDrawListener(request);}"},{"oldName":"onGlobalLayoutSubmitsRequestAndCleansUp","newName":"preDrawSubmitsRequestAndCleansUp","body":"{Picasso picasso\u003dmock(Picasso.class);when(picasso.transformRequest(any(Request.class))).thenAnswer(TRANSFORM_REQUEST_ANSWER);RequestCreator creator\u003dnew RequestCreator(picasso,URI_1,0);ImageView target\u003dmockFitImageViewTarget(true);when(target.getWidth()).thenReturn(100);when(target.getHeight()).thenReturn(100);ViewTreeObserver observer\u003dtarget.getViewTreeObserver();DeferredRequestCreator request\u003dnew DeferredRequestCreator(creator,target);request.onPreDraw();verify(observer).removeOnPreDrawListener(request);verify(picasso).enqueueAndSubmit(actionCaptor.capture());Action value\u003dactionCaptor.getValue();assertThat(value).isInstanceOf(ImageViewAction.class);assertThat(value.getRequest().targetWidth).isEqualTo(100);assertThat(value.getRequest().targetHeight).isEqualTo(100);}"},{"oldName":"multipleLayoutsOnlyTriggersOnce","newName":"multiplePreDrawsOnlyTriggersOnce","body":"{Picasso picasso\u003dmock(Picasso.class);when(picasso.transformRequest(any(Request.class))).thenAnswer(TRANSFORM_REQUEST_ANSWER);RequestCreator creator\u003dnew RequestCreator(picasso,URI_1,0);ImageView target\u003dmockFitImageViewTarget(true);when(target.getWidth()).thenReturn(100);when(target.getHeight()).thenReturn(100);ViewTreeObserver observer\u003dtarget.getViewTreeObserver();DeferredRequestCreator request\u003dnew DeferredRequestCreator(creator,target);request.onPreDraw();request.onPreDraw();verify(observer).removeOnPreDrawListener(request);verify(picasso).enqueueAndSubmit(actionCaptor.capture());}"},{"oldName":"nullBitmapOptionsIfNoResizing","newName":"nullBitmapOptionsIfNoResizingOrPurgeable","body":"{final Request noResize\u003dnew Request.Builder(URI_1).build();final BitmapFactory.Options noResizeOptions\u003dcreateBitmapOptions(noResize);assertThat(noResizeOptions).isNull();}"},{"oldName":"responseSourceHeaderSetsResponseValue","newName":"cachedResponse","body":"{server.enqueue(new MockResponse().setHeader(\"Cache-Control\",\"max-age\u003d31536000\").setBody(\"Hi\"));Downloader.Response response1\u003ddownloader.load(uri,false);assertThat(response1.cached).isFalse();Okio.buffer(Okio.source(response1.getInputStream())).readByteArray();Downloader.Response response2\u003ddownloader.load(uri,true);assertThat(response2.cached).isTrue();}"},{"oldName":"nullResourceDoesNotSubmitRequest","newName":"noImageDoesNotSubmitRequest","body":"{Picasso picasso\u003dmock(Picasso.class);ImageView target\u003dmock(ImageView.class);new RequestBuilder(picasso,null,0).into(target);verifyZeroInteractions(picasso);verifyZeroInteractions(target);}"},{"oldName":"nullResourceWithPlaceholderDoesNotSubmitAndSetsPlaceholder","newName":"noImageWithPlaceholderDoesNotSubmitAndSetsPlaceholder","body":"{Picasso picasso\u003dspy(new Picasso(Robolectric.application,null,null,null,null,null));ImageView target\u003dmock(ImageView.class);new RequestBuilder(picasso,null,0).placeholder(R.drawable.ic_dialog_map).into(target);verifyZeroInteractions(picasso);verify(target).setImageDrawable(any(PicassoDrawable.class));}"},{"oldName":"nullResourceWithNullPlaceholderDoesNotSubmitAndClears","newName":"noImageWithNullPlaceholderDoesNotSubmitAndClears","body":"{Picasso picasso\u003dmock(Picasso.class);ImageView target\u003dmock(ImageView.class);new RequestBuilder(picasso,null,0).placeholder(null).into(target);verifyZeroInteractions(picasso);verify(target).setImageDrawable(null);}"},{"oldName":"cacheOnlyInstalledOnApi13","newName":"cacheNotInstalledWhenUnavailable","body":"{UrlConnectionLoader.cache\u003dnull;server.enqueue(new MockResponse());loader.load(\"/\",false);Object cache\u003dUrlConnectionLoader.cache;assertThat(cache).isNull();}"},{"oldName":"nullTransform_throws","newName":"withNullTransformThrows","body":"{Picasso picasso\u003dPicasso.with(new Activity());Transformation okTransformation\u003dmock(Transformation.class);when(okTransformation.transform(any(Bitmap.class))).thenReturn(mock(Bitmap.class));when(okTransformation.key()).thenReturn(\"ok()\");Transformation nullTransformation\u003dmock(Transformation.class);when(nullTransformation.transform(any(Bitmap.class))).thenReturn(null);when(nullTransformation.key()).thenReturn(\"null()\");List\u003cTransformation\u003e transformations\u003dnew ArrayList\u003cTransformation\u003e();transformations.add(okTransformation);transformations.add(nullTransformation);Request request\u003dnew Request(picasso,CONTENT_1_URL,mock(ImageView.class),null,transformations,null,Type.CONTENT,0,null);try {picasso.transformResult(request,mock(Bitmap.class));fail(\"transformResult should throw a NullPointerException when a tranformation returns null\");} catch (NullPointerException e) {assertThat(e.getMessage()).contains(\"after 1 previous transformation\");assertThat(e.getMessage()).contains(\"null() returned null\");}}"},{"oldName":"decodeMetadata_handlesWrappedMetadata","newName":"decodeMetadata_handlesId3WrappedInEmsg","body":"{EventMessage emsg\u003dnew EventMessage(EventMessage.ID3_SCHEME_ID,\"\",1,0,encodeTxxxId3Frame(\"Test description\",\"Test value\"));List\u003cMetadata\u003e metadata\u003drunRenderer(EMSG_FORMAT,eventMessageEncoder.encode(emsg));assertThat(metadata).hasSize(1);assertThat(metadata.get(0).length()).isEqualTo(1);TextInformationFrame expectedId3Frame\u003dnew TextInformationFrame(\"TXXX\",\"Test description\",\"Test value\");assertThat(metadata.get(0).get(0)).isEqualTo(expectedId3Frame);}"},{"oldName":"decodeMetadata_handlesWrappedMetadata","newName":"decodeMetadata_handlesId3WrappedInEmsg","body":"{EventMessage emsg\u003dnew EventMessage(EventMessage.ID3_SCHEME_ID,\"\",1,0,encodeTxxxId3Frame(\"Test description\",\"Test value\"));List\u003cMetadata\u003e metadata\u003drunRenderer(EMSG_FORMAT,eventMessageEncoder.encode(emsg));assertThat(metadata).hasSize(1);assertThat(metadata.get(0).length()).isEqualTo(1);TextInformationFrame expectedId3Frame\u003dnew TextInformationFrame(\"TXXX\",\"Test description\",\"Test value\");assertThat(metadata.get(0).get(0)).isEqualTo(expectedId3Frame);}"},{"oldName":"testReadFormatDeduplicated","newName":"testEqualFormatsDeduplicated","body":"{sampleQueue.format(FORMAT_1);assertReadFormat(false,FORMAT_1);sampleQueue.format(FORMAT_1);assertNoSamplesToRead(FORMAT_1);sampleQueue.format(FORMAT_1_COPY);assertNoSamplesToRead(FORMAT_1);}"},{"oldName":"getTasks_returnTasks","newName":"getCurrentDownloads_returnsCurrentDownloads","body":"{TaskWrapper task1\u003dnew DownloadRunner(uri1).postDownloadRequest().getTask();TaskWrapper task2\u003dnew DownloadRunner(uri2).postDownloadRequest().getTask();TaskWrapper task3\u003dnew DownloadRunner(uri3).postDownloadRequest().postRemoveRequest().getTask();task3.assertRemoving();List\u003cDownload\u003e downloads\u003ddownloadManager.getCurrentDownloads();assertThat(downloads).hasSize(3);String [] taskIds\u003d{task1.taskId,task2.taskId,task3.taskId};String [] downloadIds\u003d{downloads.get(0).request.id,downloads.get(1).request.id,downloads.get(2).request.id};assertThat(downloadIds).isEqualTo(taskIds);}"},{"oldName":"manuallyStopAndResumeSingleDownload","newName":"setAndClearSingleDownloadStopReason","body":"{DownloadRunner runner\u003dnew DownloadRunner(uri1).postDownloadRequest();TaskWrapper task\u003drunner.getTask();task.assertDownloading();runOnMainThread(() -\u003e downloadManager.setStopReason(task.taskId,APP_STOP_REASON));task.assertStopped();runOnMainThread(() -\u003e downloadManager.setStopReason(task.taskId,Download.STOP_REASON_NONE));runner.getDownloader(1).assertStarted().unblock();downloadManagerListener.blockUntilTasksCompleteAndThrowAnyDownloadError();}"},{"oldName":"manuallyStoppedDownloadCanBeCancelled","newName":"setSingleDownloadStopReasonThenRemove_removesDownload","body":"{DownloadRunner runner\u003dnew DownloadRunner(uri1).postDownloadRequest();TaskWrapper task\u003drunner.getTask();task.assertDownloading();runOnMainThread(() -\u003e downloadManager.setStopReason(task.taskId,APP_STOP_REASON));task.assertStopped();runner.postRemoveRequest();runner.getDownloader(1).assertStarted().unblock();task.assertRemoved();downloadManagerListener.blockUntilTasksCompleteAndThrowAnyDownloadError();}"},{"oldName":"manuallyStoppedSingleDownload_doesNotAffectOthers","newName":"setSingleDownloadStopReason_doesNotAffectOtherDownloads","body":"{DownloadRunner runner1\u003dnew DownloadRunner(uri1);DownloadRunner runner2\u003dnew DownloadRunner(uri2);DownloadRunner runner3\u003dnew DownloadRunner(uri3);runner1.postDownloadRequest().getTask().assertDownloading();runner2.postDownloadRequest().postRemoveRequest().getTask().assertRemoving();runOnMainThread(() -\u003e downloadManager.setStopReason(runner1.getTask().taskId,APP_STOP_REASON));runner1.getTask().assertStopped();runner2.getDownloader(1).unblock().assertReleased();runner3.postDownloadRequest().getDownloader(0).assertStarted().unblock();downloadManagerListener.blockUntilTasksCompleteAndThrowAnyDownloadError();}"},{"oldName":"getTasks_returnTasks","newName":"getCurrentDownloads_returnsCurrentDownloads","body":"{TaskWrapper task1\u003dnew DownloadRunner(uri1).postDownloadRequest().getTask();TaskWrapper task2\u003dnew DownloadRunner(uri2).postDownloadRequest().getTask();TaskWrapper task3\u003dnew DownloadRunner(uri3).postDownloadRequest().postRemoveRequest().getTask();task3.assertRemoving();List\u003cDownload\u003e downloads\u003ddownloadManager.getCurrentDownloads();assertThat(downloads).hasSize(3);String [] taskIds\u003d{task1.taskId,task2.taskId,task3.taskId};String [] downloadIds\u003d{downloads.get(0).request.id,downloads.get(1).request.id,downloads.get(2).request.id};assertThat(downloadIds).isEqualTo(taskIds);}"},{"oldName":"manuallyStopAndResumeSingleDownload","newName":"setAndClearSingleDownloadStopReason","body":"{DownloadRunner runner\u003dnew DownloadRunner(uri1).postDownloadRequest();TaskWrapper task\u003drunner.getTask();task.assertDownloading();runOnMainThread(() -\u003e downloadManager.setStopReason(task.taskId,APP_STOP_REASON));task.assertStopped();runOnMainThread(() -\u003e downloadManager.setStopReason(task.taskId,Download.STOP_REASON_NONE));runner.getDownloader(1).assertStarted().unblock();downloadManagerListener.blockUntilTasksCompleteAndThrowAnyDownloadError();}"},{"oldName":"manuallyStoppedDownloadCanBeCancelled","newName":"setSingleDownloadStopReasonThenRemove_removesDownload","body":"{DownloadRunner runner\u003dnew DownloadRunner(uri1).postDownloadRequest();TaskWrapper task\u003drunner.getTask();task.assertDownloading();runOnMainThread(() -\u003e downloadManager.setStopReason(task.taskId,APP_STOP_REASON));task.assertStopped();runner.postRemoveRequest();runner.getDownloader(1).assertStarted().unblock();task.assertRemoved();downloadManagerListener.blockUntilTasksCompleteAndThrowAnyDownloadError();}"},{"oldName":"manuallyStoppedSingleDownload_doesNotAffectOthers","newName":"setSingleDownloadStopReason_doesNotAffectOtherDownloads","body":"{DownloadRunner runner1\u003dnew DownloadRunner(uri1);DownloadRunner runner2\u003dnew DownloadRunner(uri2);DownloadRunner runner3\u003dnew DownloadRunner(uri3);runner1.postDownloadRequest().getTask().assertDownloading();runner2.postDownloadRequest().postRemoveRequest().getTask().assertRemoving();runOnMainThread(() -\u003e downloadManager.setStopReason(runner1.getTask().taskId,APP_STOP_REASON));runner1.getTask().assertStopped();runner2.getDownloader(1).unblock().assertReleased();runner3.postDownloadRequest().getDownloader(0).assertStarted().unblock();downloadManagerListener.blockUntilTasksCompleteAndThrowAnyDownloadError();}"},{"oldName":"stopAndResume","newName":"pauseAndResume","body":"{DownloadRunner runner1\u003dnew DownloadRunner(uri1);DownloadRunner runner2\u003dnew DownloadRunner(uri2);DownloadRunner runner3\u003dnew DownloadRunner(uri3);runner1.postDownloadRequest().getTask().assertDownloading();runner2.postDownloadRequest().postRemoveRequest().getTask().assertRemoving();runner2.postDownloadRequest();runOnMainThread(() -\u003e downloadManager.pauseDownloads());runner1.getTask().assertStopped();runner2.getDownloader(1).unblock().assertReleased();runner2.getTask().assertStopped();runner2.getDownloader(2).assertDoesNotStart();runner1.postRemoveRequest();runner1.getDownloader(1).assertStarted().unblock();runner1.getTask().assertRemoved();runner3.postDownloadRequest().getDownloader(0).assertDoesNotStart();runOnMainThread(() -\u003e downloadManager.resumeDownloads());runner2.getDownloader(2).assertStarted().unblock();runner3.getDownloader(0).assertStarted().unblock();downloadManagerListener.blockUntilTasksCompleteAndThrowAnyDownloadError();}"},{"oldName":"stopAndResume","newName":"pauseAndResume","body":"{DownloadRunner runner1\u003dnew DownloadRunner(uri1);DownloadRunner runner2\u003dnew DownloadRunner(uri2);DownloadRunner runner3\u003dnew DownloadRunner(uri3);runner1.postDownloadRequest().getTask().assertDownloading();runner2.postDownloadRequest().postRemoveRequest().getTask().assertRemoving();runner2.postDownloadRequest();runOnMainThread(() -\u003e downloadManager.pauseDownloads());runner1.getTask().assertStopped();runner2.getDownloader(1).unblock().assertReleased();runner2.getTask().assertStopped();runner2.getDownloader(2).assertDoesNotStart();runner1.postRemoveRequest();runner1.getDownloader(1).assertStarted().unblock();runner1.getTask().assertRemoved();runner3.postDownloadRequest().getDownloader(0).assertDoesNotStart();runOnMainThread(() -\u003e downloadManager.resumeDownloads());runner2.getDownloader(2).assertStarted().unblock();runner3.getDownloader(0).assertStarted().unblock();downloadManagerListener.blockUntilTasksCompleteAndThrowAnyDownloadError();}"},{"oldName":"testMultipleDownloadAction","newName":"testMultipleDownloadRequest","body":"{downloadKeys(fakeStreamKey1);downloadKeys(fakeStreamKey2);downloadManagerListener.blockUntilTasksCompleteAndThrowAnyDownloadError();assertCachedData(cache,fakeDataSet);}"},{"oldName":"upgradeActionFile_createsDownloads","newName":"upgradeAndDelete_createsDownloads","body":"{byte [] actionFileBytes\u003dTestUtil.getByteArray(ApplicationProvider.getApplicationContext(),\"offline/action_file_for_download_index_upgrade.exi\");try (FileOutputStream output\u003dnew FileOutputStream(tempFile)) {output.write(actionFileBytes);} StreamKey expectedStreamKey1\u003dnew StreamKey(3,4,5);StreamKey expectedStreamKey2\u003dnew StreamKey(0,1,2);DownloadAction expectedAction1\u003dnew DownloadAction(\"key123\",TYPE_DASH,Uri.parse(\"https://www.test.com/download1\"),asList(expectedStreamKey1),\"key123\",new byte[]{1,2,3,4});DownloadAction expectedAction2\u003dnew DownloadAction(\"key234\",TYPE_DASH,Uri.parse(\"https://www.test.com/download2\"),asList(expectedStreamKey2),\"key234\",new byte[]{5,4,3,2,1});ActionFileUpgradeUtil.upgradeAndDelete(tempFile,null,downloadIndex,true);assertDownloadIndexContainsAction(expectedAction1,Download.STATE_QUEUED);assertDownloadIndexContainsAction(expectedAction2,Download.STATE_QUEUED);}"},{"oldName":"setManualStopReason_setToReasonNone","newName":"setManualStopReason_setReasonToNone","body":"{String id\u003d\"id\";DownloadStateBuilder downloadStateBuilder\u003dnew DownloadStateBuilder(id).setState(DownloadState.STATE_COMPLETED).setManualStopReason(0x12345678);DownloadState downloadState\u003ddownloadStateBuilder.build();downloadIndex.putDownloadState(downloadState);downloadIndex.setManualStopReason(DownloadState.MANUAL_STOP_REASON_NONE);DownloadState readDownloadState\u003ddownloadIndex.getDownloadState(id);DownloadState expectedDownloadState\u003ddownloadStateBuilder.setManualStopReason(DownloadState.MANUAL_STOP_REASON_NONE).build();DownloadStateTest.assertEqual(readDownloadState,expectedDownloadState);}"},{"oldName":"testAttachPlayer_setsAdUiViewGroup","newName":"testStart_setsAdUiViewGroup","body":"{setupPlayback(CONTENT_TIMELINE,PREROLL_ADS_DURATIONS_US,PREROLL_CUE_POINTS_SECONDS);imaAdsLoader.start(adsLoaderListener,adUiViewGroup);verify(adDisplayContainer,atLeastOnce()).setAdContainer(adUiViewGroup);}"},{"oldName":"testAttachPlayer_updatesAdPlaybackState","newName":"testStart_updatesAdPlaybackState","body":"{setupPlayback(CONTENT_TIMELINE,PREROLL_ADS_DURATIONS_US,PREROLL_CUE_POINTS_SECONDS);imaAdsLoader.start(adsLoaderListener,adUiViewGroup);assertThat(adsLoaderListener.adPlaybackState).isEqualTo(new AdPlaybackState(0).withAdDurationsUs(PREROLL_ADS_DURATIONS_US));}"},{"oldName":"testAttachAfterRelease","newName":"testStartAfterRelease","body":"{setupPlayback(CONTENT_TIMELINE,PREROLL_ADS_DURATIONS_US,PREROLL_CUE_POINTS_SECONDS);imaAdsLoader.release();imaAdsLoader.start(adsLoaderListener,adUiViewGroup);}"},{"oldName":"testAttachAndCallbacksAfterRelease","newName":"testStartAndCallbacksAfterRelease","body":"{setupPlayback(CONTENT_TIMELINE,PREROLL_ADS_DURATIONS_US,PREROLL_CUE_POINTS_SECONDS);imaAdsLoader.release();imaAdsLoader.start(adsLoaderListener,adUiViewGroup);fakeExoPlayer.setPlayingContentPosition(0);fakeExoPlayer.setState(Player.STATE_READY,true);imaAdsLoader.requestAds(adUiViewGroup);imaAdsLoader.onAdEvent(getAdEvent(AdEventType.LOADED,UNSKIPPABLE_AD));imaAdsLoader.loadAd(TEST_URI.toString());imaAdsLoader.onAdEvent(getAdEvent(AdEventType.CONTENT_PAUSE_REQUESTED,UNSKIPPABLE_AD));imaAdsLoader.playAd();imaAdsLoader.onAdEvent(getAdEvent(AdEventType.STARTED,UNSKIPPABLE_AD));imaAdsLoader.pauseAd();imaAdsLoader.stopAd();imaAdsLoader.onPlayerError(ExoPlaybackException.createForSource(new IOException()));imaAdsLoader.onPositionDiscontinuity(Player.DISCONTINUITY_REASON_SEEK);imaAdsLoader.onAdEvent(getAdEvent(AdEventType.CONTENT_RESUME_REQUESTED,null));imaAdsLoader.handlePrepareError(0,0,new IOException());}"},{"oldName":"testAttachPlayer_setsAdUiViewGroup","newName":"testStart_setsAdUiViewGroup","body":"{setupPlayback(CONTENT_TIMELINE,PREROLL_ADS_DURATIONS_US,PREROLL_CUE_POINTS_SECONDS);imaAdsLoader.start(adsLoaderListener,adUiViewGroup);verify(adDisplayContainer,atLeastOnce()).setAdContainer(adUiViewGroup);}"},{"oldName":"testAttachPlayer_updatesAdPlaybackState","newName":"testStart_updatesAdPlaybackState","body":"{setupPlayback(CONTENT_TIMELINE,PREROLL_ADS_DURATIONS_US,PREROLL_CUE_POINTS_SECONDS);imaAdsLoader.start(adsLoaderListener,adUiViewGroup);assertThat(adsLoaderListener.adPlaybackState).isEqualTo(new AdPlaybackState(0).withAdDurationsUs(PREROLL_ADS_DURATIONS_US));}"},{"oldName":"testAttachAfterRelease","newName":"testStartAfterRelease","body":"{setupPlayback(CONTENT_TIMELINE,PREROLL_ADS_DURATIONS_US,PREROLL_CUE_POINTS_SECONDS);imaAdsLoader.release();imaAdsLoader.start(adsLoaderListener,adUiViewGroup);}"},{"oldName":"testAttachAndCallbacksAfterRelease","newName":"testStartAndCallbacksAfterRelease","body":"{setupPlayback(CONTENT_TIMELINE,PREROLL_ADS_DURATIONS_US,PREROLL_CUE_POINTS_SECONDS);imaAdsLoader.release();imaAdsLoader.start(adsLoaderListener,adUiViewGroup);fakeExoPlayer.setPlayingContentPosition(0);fakeExoPlayer.setState(Player.STATE_READY,true);imaAdsLoader.requestAds(adUiViewGroup);imaAdsLoader.onAdEvent(getAdEvent(AdEventType.LOADED,UNSKIPPABLE_AD));imaAdsLoader.loadAd(TEST_URI.toString());imaAdsLoader.onAdEvent(getAdEvent(AdEventType.CONTENT_PAUSE_REQUESTED,UNSKIPPABLE_AD));imaAdsLoader.playAd();imaAdsLoader.onAdEvent(getAdEvent(AdEventType.STARTED,UNSKIPPABLE_AD));imaAdsLoader.pauseAd();imaAdsLoader.stopAd();imaAdsLoader.onPlayerError(ExoPlaybackException.createForSource(new IOException()));imaAdsLoader.onPositionDiscontinuity(Player.DISCONTINUITY_REASON_SEEK);imaAdsLoader.onAdEvent(getAdEvent(AdEventType.CONTENT_RESUME_REQUESTED,null));imaAdsLoader.handlePrepareError(0,0,new IOException());}"},{"oldName":"testSideloadedShuffleOrder","newName":"testDefaultShuffleOrderSideloaded","body":"{int [] shuffledIndices\u003dnew int[]{2,1,0,4,3};ShuffleOrder shuffleOrder\u003dnew DefaultShuffleOrder(shuffledIndices,RANDOM_SEED);assertThat(shuffleOrder.getFirstIndex()).isEqualTo(2);assertThat(shuffleOrder.getLastIndex()).isEqualTo(3);for (int i\u003d0; i \u003c 4; i++) {assertThat(shuffleOrder.getNextIndex(shuffledIndices[i])).isEqualTo(shuffledIndices[i + 1]);}assertThat(shuffleOrder.getNextIndex(3)).isEqualTo(C.INDEX_UNSET);for (int i\u003d4; i \u003e 0; i--) {assertThat(shuffleOrder.getPreviousIndex(shuffledIndices[i])).isEqualTo(shuffledIndices[i - 1]);}assertThat(shuffleOrder.getPreviousIndex(2)).isEqualTo(C.INDEX_UNSET);}"},{"oldName":"testStreamSerialization","newName":"testSerializerWriteRead","body":"{assertStreamSerializationRoundTrip(DownloadAction.createDownloadAction(TYPE_DASH,uri1,toList(new StreamKey(0,1,2),new StreamKey(3,4,5)),\"key123\",data));assertStreamSerializationRoundTrip(DownloadAction.createRemoveAction(TYPE_DASH,uri1,\"key123\",data));}"},{"oldName":"testSideloadedShuffleOrder","newName":"testDefaultShuffleOrderSideloaded","body":"{int [] shuffledIndices\u003dnew int[]{2,1,0,4,3};ShuffleOrder shuffleOrder\u003dnew DefaultShuffleOrder(shuffledIndices,RANDOM_SEED);assertThat(shuffleOrder.getFirstIndex()).isEqualTo(2);assertThat(shuffleOrder.getLastIndex()).isEqualTo(3);for (int i\u003d0; i \u003c 4; i++) {assertThat(shuffleOrder.getNextIndex(shuffledIndices[i])).isEqualTo(shuffledIndices[i + 1]);}assertThat(shuffleOrder.getNextIndex(3)).isEqualTo(C.INDEX_UNSET);for (int i\u003d4; i \u003e 0; i--) {assertThat(shuffleOrder.getPreviousIndex(shuffledIndices[i])).isEqualTo(shuffledIndices[i - 1]);}assertThat(shuffleOrder.getPreviousIndex(2)).isEqualTo(C.INDEX_UNSET);}"},{"oldName":"testBitmapWithRegion","newName":"testBitmapPercentageRegion","body":"{TtmlSubtitle subtitle\u003dgetSubtitle(BITMAP_REGION_FILE);List\u003cCue\u003e output\u003dsubtitle.getCues(1000000);assertThat(output).hasSize(1);Cue ttmlCue\u003doutput.get(0);assertThat(ttmlCue.text).isEqualTo(null);assertThat(ttmlCue.bitmap).isNotNull();assertThat(ttmlCue.position).isEqualTo(24f / 100f);assertThat(ttmlCue.line).isEqualTo(28f / 100f);assertThat(ttmlCue.size).isEqualTo(51f / 100f);assertThat(ttmlCue.bitmapHeight).isEqualTo(Cue.DIMEN_UNSET);output\u003dsubtitle.getCues(4000000);ttmlCue\u003doutput.get(0);assertThat(ttmlCue.text).isEqualTo(null);assertThat(ttmlCue.bitmap).isNotNull();assertThat(ttmlCue.position).isEqualTo(21f / 100f);assertThat(ttmlCue.line).isEqualTo(35f / 100f);assertThat(ttmlCue.size).isEqualTo(57f / 100f);assertThat(ttmlCue.bitmapHeight).isEqualTo(Cue.DIMEN_UNSET);output\u003dsubtitle.getCues(7500000);ttmlCue\u003doutput.get(0);assertThat(ttmlCue.text).isEqualTo(null);assertThat(ttmlCue.bitmap).isNotNull();assertThat(ttmlCue.position).isEqualTo(24f / 100f);assertThat(ttmlCue.line).isEqualTo(28f / 100f);assertThat(ttmlCue.size).isEqualTo(51f / 100f);assertThat(ttmlCue.bitmapHeight).isEqualTo(Cue.DIMEN_UNSET);}"},{"oldName":"testBitmapWithUnsupportedRegion","newName":"testBitmapUnsupportedRegion","body":"{TtmlSubtitle subtitle\u003dgetSubtitle(BITMAP_UNSUPPORTED_REGION_FILE);List\u003cCue\u003e output\u003dsubtitle.getCues(1000000);assertThat(output).hasSize(1);Cue ttmlCue\u003doutput.get(0);assertThat(ttmlCue.text).isEqualTo(null);assertThat(ttmlCue.bitmap).isNotNull();assertThat(ttmlCue.position).isEqualTo(Cue.DIMEN_UNSET);assertThat(ttmlCue.line).isEqualTo(Cue.DIMEN_UNSET);assertThat(ttmlCue.size).isEqualTo(Cue.DIMEN_UNSET);assertThat(ttmlCue.bitmapHeight).isEqualTo(Cue.DIMEN_UNSET);output\u003dsubtitle.getCues(4000000);ttmlCue\u003doutput.get(0);assertThat(ttmlCue.text).isEqualTo(null);assertThat(ttmlCue.bitmap).isNotNull();assertThat(ttmlCue.position).isEqualTo(Cue.DIMEN_UNSET);assertThat(ttmlCue.line).isEqualTo(Cue.DIMEN_UNSET);assertThat(ttmlCue.size).isEqualTo(Cue.DIMEN_UNSET);assertThat(ttmlCue.bitmapHeight).isEqualTo(Cue.DIMEN_UNSET);}"},{"oldName":"buildMediaItem_testClear","newName":"buildAndClear_assertDefaultValues","body":"{MediaItem.Builder builder\u003dnew MediaItem.Builder();builder.setMedia(\"http://example.com\").setTitle(\"title\").setMimeType(MimeTypes.AUDIO_MP4).setStartPositionUs(3).setEndPositionUs(4).buildAndClear();assertDefaultValues(builder.build());}"},{"oldName":"testSample","newName":"testAc3Sample","body":"{ExtractorAsserts.assertBehavior(Ac3Extractor::new,\"ts/sample.ac3\");}"},{"oldName":"testSingleLoop","newName":"testSingleLoopTimeline","body":"{Timeline timeline\u003dgetLoopingTimeline(multiWindowTimeline,1);TimelineAsserts.assertWindowTags(timeline,111,222,333);TimelineAsserts.assertPeriodCounts(timeline,1,1,1);for (boolean shuffled : new boolean[]{false,true}) {TimelineAsserts.assertPreviousWindowIndices(timeline,Player.REPEAT_MODE_OFF,shuffled,C.INDEX_UNSET,0,1);TimelineAsserts.assertPreviousWindowIndices(timeline,Player.REPEAT_MODE_ONE,shuffled,0,1,2);TimelineAsserts.assertPreviousWindowIndices(timeline,Player.REPEAT_MODE_ALL,shuffled,2,0,1);TimelineAsserts.assertNextWindowIndices(timeline,Player.REPEAT_MODE_OFF,shuffled,1,2,C.INDEX_UNSET);TimelineAsserts.assertNextWindowIndices(timeline,Player.REPEAT_MODE_ONE,shuffled,0,1,2);TimelineAsserts.assertNextWindowIndices(timeline,Player.REPEAT_MODE_ALL,shuffled,1,2,0);}}"},{"oldName":"testMultiLoop","newName":"testMultiLoopTimeline","body":"{Timeline timeline\u003dgetLoopingTimeline(multiWindowTimeline,3);TimelineAsserts.assertWindowTags(timeline,111,222,333,111,222,333,111,222,333);TimelineAsserts.assertPeriodCounts(timeline,1,1,1,1,1,1,1,1,1);for (boolean shuffled : new boolean[]{false,true}) {TimelineAsserts.assertPreviousWindowIndices(timeline,Player.REPEAT_MODE_OFF,shuffled,C.INDEX_UNSET,0,1,2,3,4,5,6,7,8);TimelineAsserts.assertPreviousWindowIndices(timeline,Player.REPEAT_MODE_ONE,shuffled,0,1,2,3,4,5,6,7,8);TimelineAsserts.assertPreviousWindowIndices(timeline,Player.REPEAT_MODE_ALL,shuffled,8,0,1,2,3,4,5,6,7);TimelineAsserts.assertNextWindowIndices(timeline,Player.REPEAT_MODE_OFF,shuffled,1,2,3,4,5,6,7,8,C.INDEX_UNSET);TimelineAsserts.assertNextWindowIndices(timeline,Player.REPEAT_MODE_ONE,shuffled,0,1,2,3,4,5,6,7,8);TimelineAsserts.assertNextWindowIndices(timeline,Player.REPEAT_MODE_ALL,shuffled,1,2,3,4,5,6,7,8,0);}}"},{"oldName":"testInfiniteLoop","newName":"testInfiniteLoopTimeline","body":"{Timeline timeline\u003dgetLoopingTimeline(multiWindowTimeline,Integer.MAX_VALUE);TimelineAsserts.assertWindowTags(timeline,111,222,333);TimelineAsserts.assertPeriodCounts(timeline,1,1,1);for (boolean shuffled : new boolean[]{false,true}) {TimelineAsserts.assertPreviousWindowIndices(timeline,Player.REPEAT_MODE_OFF,shuffled,2,0,1);TimelineAsserts.assertPreviousWindowIndices(timeline,Player.REPEAT_MODE_ONE,shuffled,0,1,2);TimelineAsserts.assertPreviousWindowIndices(timeline,Player.REPEAT_MODE_ALL,shuffled,2,0,1);TimelineAsserts.assertNextWindowIndices(timeline,Player.REPEAT_MODE_OFF,shuffled,1,2,0);TimelineAsserts.assertNextWindowIndices(timeline,Player.REPEAT_MODE_ONE,shuffled,0,1,2);TimelineAsserts.assertNextWindowIndices(timeline,Player.REPEAT_MODE_ALL,shuffled,1,2,0);}}"},{"oldName":"disabledTestCacheAndReadUnboundedRequestUnknownLength","newName":"testCacheAndReadUnboundedRequestUnknownLength","body":"{assertCacheAndRead(true,true);}"},{"oldName":"testGet","newName":"testGetByUuid","body":"{DrmInitData testInitData\u003dnew DrmInitData(DATA_1,DATA_2);assertThat(testInitData.get(WIDEVINE_UUID)).isEqualTo(DATA_1);assertThat(testInitData.get(PLAYREADY_UUID)).isEqualTo(DATA_2);assertThat(testInitData.get(UUID_NIL)).isNull();testInitData\u003dnew DrmInitData(DATA_1,DATA_2,DATA_UNIVERSAL);assertThat(testInitData.get(WIDEVINE_UUID)).isEqualTo(DATA_1);assertThat(testInitData.get(PLAYREADY_UUID)).isEqualTo(DATA_2);assertThat(testInitData.get(UUID_NIL)).isEqualTo(DATA_UNIVERSAL);testInitData\u003dnew DrmInitData(DATA_UNIVERSAL,DATA_2,DATA_1);assertThat(testInitData.get(WIDEVINE_UUID)).isEqualTo(DATA_1);assertThat(testInitData.get(PLAYREADY_UUID)).isEqualTo(DATA_2);assertThat(testInitData.get(UUID_NIL)).isEqualTo(DATA_UNIVERSAL);testInitData\u003dnew DrmInitData(DATA_1,DATA_UNIVERSAL);assertThat(testInitData.get(WIDEVINE_UUID)).isEqualTo(DATA_1);assertThat(testInitData.get(PLAYREADY_UUID)).isEqualTo(DATA_UNIVERSAL);assertThat(testInitData.get(UUID_NIL)).isEqualTo(DATA_UNIVERSAL);}"},{"oldName":"testMultipleErrorsAreAggregated","newName":"testMultipleBindErrorsAreAggregated","body":"{Object instance\u003dnew Object(){@Bind private Provider aProvider;@Bind(to\u003dString.class) private Integer anInt;};BoundFieldModule module\u003dBoundFieldModule.of(instance);try {Guice.createInjector(module);fail();} catch (CreationException e) {assertEquals(2,e.getErrorMessages().size());}}"},{"oldName":"testBindingNullProviderAnnotatedNullable","newName":"testBindingNullableNullProvider","body":"{Object instance\u003dnew Object(){@Bind @Nullable private Provider\u003cInteger\u003e anIntProvider\u003dnull;};BoundFieldModule module\u003dBoundFieldModule.of(instance);try {Guice.createInjector(module);fail();} catch (CreationException e) {assertContains(e.getMessage(),\"Binding to null is not allowed. Use Providers.of(null) if this is your intended \" + \"behavior.\");}}"},{"oldName":"testModuleOverrideRepeatedInstallsAndMultibindings","newName":"testModuleOverrideRepeatedInstallsAndMultibindings_toInstance","body":"{Module ab\u003dnew AbstractModule(){@Override protected void configure(){Multibinder\u003cString\u003e multibinder\u003dMultibinder.newSetBinder(binder(),String.class);multibinder.addBinding().toInstance(\"A\");multibinder.addBinding().toInstance(\"B\");}};assertEquals(ImmutableSet.of(\"A\",\"B\"),Guice.createInjector(ab,ab).getInstance(Key.get(setOfString)));Injector injector\u003dGuice.createInjector(ab,Modules.override(ab).with(ab));assertEquals(ImmutableSet.of(\"A\",\"B\"),injector.getInstance(Key.get(setOfString)));}"},{"oldName":"testCircularlyDependentConstructorsWithProviderInstances","newName":"testCircularlyDependentConstructorsWithProviderMethods","body":"{Injector injector\u003dGuice.createInjector(new AbstractModule(){protected void configure(){}@Provides @Singleton A a(B b){return new AImpl(b);}@Provides B b(A a){return new BImpl(a);}});assertCircularDependencies(injector);}"},{"oldName":"testModuleConfig","newName":"testModuleConfigUsingJpa","body":"{new InjectorBuilder().addModules(new JpaPersistModule(\"myunit\")).stage(Stage.PRODUCTION).requireExplicitBindings().build();}"},{"oldName":"testSpringIntegration","newName":"testBindFromSpring","body":"{final DefaultListableBeanFactory beanFactory\u003dnew DefaultListableBeanFactory();RootBeanDefinition singleton\u003dnew RootBeanDefinition(Singleton.class);beanFactory.registerBeanDefinition(\"singleton\",singleton);RootBeanDefinition prototype\u003dnew RootBeanDefinition(Prototype.class,false);beanFactory.registerBeanDefinition(\"prototype\",prototype);Injector injector\u003dGuice.createInjector(new AbstractModule(){protected void configure(){bind(BeanFactory.class).toInstance(beanFactory);bind(Singleton.class).toProvider(fromSpring(Singleton.class,\"singleton\"));bind(Prototype.class).toProvider(fromSpring(Prototype.class,\"prototype\"));}});assertNotNull(injector.getInstance(Singleton.class));assertSame(injector.getInstance(Singleton.class),injector.getInstance(Singleton.class));assertNotNull(injector.getInstance(Prototype.class));assertNotSame(injector.getInstance(Prototype.class),injector.getInstance(Prototype.class));}"}]