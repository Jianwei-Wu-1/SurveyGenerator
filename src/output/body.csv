"testListSetMap","<code>public&nbspvoid&nbspXXX()&nbsp{<br/>&nbsp&nbspassertEqualsBothWays(mapStringInteger,&nbspTypes.mapOf(String.class,&nbspInteger.class));<br/>&nbsp&nbspassertEqualsBothWays(listString,&nbspTypes.listOf(String.class));<br/>&nbsp&nbspassertEqualsBothWays(setString,&nbspTypes.setOf(String.class));<br/>}</code>"
"testDefensiveCopies","<code>public&nbspvoid&nbspXXX()&nbsp{<br/>&nbsp&nbspType[]&nbsparguments&nbsp=&nbspnew&nbspType[]&nbsp{String.class,&nbspInteger.class};<br/>&nbsp&nbspParameterizedType&nbspparameterizedType&nbsp=&nbspTypes.newParameterizedType(Map.class,&nbsparguments);<br/>&nbsp&nbsparguments[0]&nbsp=&nbspnull;<br/>&nbsp&nbspassertEquals(String.class,&nbspparameterizedType.getActualTypeArguments()[0]);<br/>&nbsp&nbspparameterizedType.getActualTypeArguments()[1]&nbsp=&nbspnull;<br/>&nbsp&nbspassertEquals(Integer.class,&nbspparameterizedType.getActualTypeArguments()[1]);<br/>}</code>"
"testTypeParametersMustNotBePrimitives","<code>public&nbspvoid&nbspXXX()&nbsp{<br/>&nbsp&nbsptry&nbsp{<br/>&nbsp&nbsp&nbsp&nbspTypes.newParameterizedType(Map.class,&nbspString.class,&nbspint.class);<br/>&nbsp&nbsp&nbsp&nbspfail();<br/>&nbsp&nbsp}&nbspcatch&nbsp(IllegalArgumentException&nbspexpected)&nbsp{<br/>&nbsp&nbsp&nbsp&nbspassertContains(<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspexpected.getMessage(),&nbspPrimitive&nbsptypes&nbspare&nbspnot&nbspallowed&nbspin&nbsptype&nbspparameters&nbspint);<br/>&nbsp&nbsp}<br/>}</code>"
"testWildcardTypes","<code>public&nbspvoid&nbspXXX()&nbsp{<br/>&nbsp&nbspassertEqualsBothWays(getWildcard(wildcardSuper),&nbspsupertypeOf(CharSequence.class));<br/>&nbsp&nbspassertEqualsBothWays(getWildcard(wildcardExtends),&nbspsubtypeOf(CharSequence.class));<br/>&nbsp&nbspassertEqualsBothWays(getWildcard(wildcardObject),&nbspsubtypeOf(Object.class));<br/>&nbsp&nbspassertEquals(?&nbspsuper&nbspjava.lang.CharSequence,&nbspsupertypeOf(CharSequence.class).toString());<br/>&nbsp&nbspassertEquals(?&nbspextends&nbspjava.lang.CharSequence,&nbspsubtypeOf(CharSequence.class).toString());<br/>&nbsp&nbspassertEquals(?,&nbspsubtypeOf(Object.class).toString());<br/>&nbsp&nbspassertEqualWhenReserialized(supertypeOf(CharSequence.class));<br/>&nbsp&nbspassertEqualWhenReserialized(subtypeOf(CharSequence.class));<br/>}</code>"
"testToString","<code>public&nbspvoid&nbspXXX()&nbsp{<br/>&nbsp&nbspAssert.assertEquals(java.lang.String,&nbspMoreTypes.typeToString(String.class));<br/>&nbsp&nbspassertEquals(java.util.Set<java.lang.String>[][],&nbspMoreTypes.typeToString(setStringArray));<br/>&nbsp&nbspassertEquals(<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbspjava.util.Map<java.lang.String,&nbspjava.lang.Integer>,<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbspMoreTypes.typeToString(mapStringInteger));<br/>&nbsp&nbspassertEquals(<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbspjava.util.List<java.util.Set<java.lang.String>[][]>,<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbspMoreTypes.typeToString(listSetStringArray));<br/>&nbsp&nbspassertEquals(innerFloatDouble.toString(),&nbspMoreTypes.typeToString(innerFloatDouble));<br/>}</code>"
